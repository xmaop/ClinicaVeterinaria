<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.Unity.Interception.Fakes</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface.#ctor(Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the shim of AdditionalInterface.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface.ConstructorType">
            <summary>Sets the shim of AdditionalInterface.AdditionalInterface(Type additionalInterface)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface.AllInstances.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the shim of AdditionalInterface.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface`1">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface`1.#ctor(Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface`1.Constructor">
            <summary>Sets the shim of AdditionalInterface`1.AdditionalInterface`1()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterface`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.Bind(Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.Bind(Microsoft.Practices.Unity.InterceptionExtension.IAdditionalInterfacesPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.AddAdditionalInterfaceType">
            <summary>Sets the shim of AdditionalInterfacesPolicy.AddAdditionalInterface(Type additionalInterface)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.AdditionalInterfacesGet">
            <summary>Sets the shim of AdditionalInterfacesPolicy.get_AdditionalInterfaces()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.Constructor">
            <summary>Sets the shim of AdditionalInterfacesPolicy.AdditionalInterfacesPolicy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.GetOrCreateIPolicyListTypeString">
            <summary>Sets the shim of AdditionalInterfacesPolicy.GetOrCreate(IPolicyList policies, Type typeToCreate, String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.AllInstances.AddAdditionalInterfaceType">
            <summary>Sets the shim of AdditionalInterfacesPolicy.AddAdditionalInterface(Type additionalInterface)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAdditionalInterfacesPolicy.AllInstances.AdditionalInterfacesGet">
            <summary>Sets the shim of AdditionalInterfacesPolicy.get_AdditionalInterfaces()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimApplyNoPoliciesAttribute">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesAttribute</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimApplyNoPoliciesAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimApplyNoPoliciesAttribute.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimApplyNoPoliciesAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimApplyNoPoliciesAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimApplyNoPoliciesAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimApplyNoPoliciesAttribute.Constructor">
            <summary>Sets the shim of ApplyNoPoliciesAttribute.ApplyNoPoliciesAttribute()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimApplyNoPoliciesAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.ConstructorAssembly">
            <summary>Sets the shim of AssemblyMatchingRule.AssemblyMatchingRule(Assembly assembly)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.ConstructorString">
            <summary>Sets the shim of AssemblyMatchingRule.AssemblyMatchingRule(String assemblyName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.DoesAssemblyNameMatchStringStringAssemblyName">
            <summary>Sets the shim of AssemblyMatchingRule.DoesAssemblyNameMatchString(String assemblyNameString, AssemblyName assemblyName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of AssemblyMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAssemblyMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of AssemblyMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.Constructor">
            <summary>Sets the shim of AttributeDrivenPolicy.AttributeDrivenPolicy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.DoGetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the shim of AttributeDrivenPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.DoesMatchMethodImplementationInfo">
            <summary>Sets the shim of AttributeDrivenPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.AllInstances.DoGetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the shim of AttributeDrivenPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicy.AllInstances.DoesMatchMethodImplementationInfo">
            <summary>Sets the shim of AttributeDrivenPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicyMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicyMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.Constructor">
            <summary>Sets the shim of AttributeDrivenPolicyMatchingRule.AttributeDrivenPolicyMatchingRule()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of AttributeDrivenPolicyMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimAttributeDrivenPolicyMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of AttributeDrivenPolicyMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.Bind(Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.Bind(Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.ConstructorSelectedConstructor">
            <summary>Sets the shim of ConstructorWithResolverKeysSelectorPolicy.ConstructorWithResolverKeysSelectorPolicy(SelectedConstructor selectedConstructor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.SelectConstructorIBuilderContextIPolicyList">
            <summary>Sets the shim of ConstructorWithResolverKeysSelectorPolicy.SelectConstructor(IBuilderContext context, IPolicyList resolverPolicyDestination)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimConstructorWithResolverKeysSelectorPolicy.AllInstances.SelectConstructorIBuilderContextIPolicyList">
            <summary>Sets the shim of ConstructorWithResolverKeysSelectorPolicy.SelectConstructor(IBuilderContext context, IPolicyList resolverPolicyDestination)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.#ctor(Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.ConstructorIInterceptorTypeType">
            <summary>Sets the shim of CurrentInterceptionRequest.CurrentInterceptionRequest(IInterceptor interceptor, Type typeToIntercept, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.ImplementationTypeGet">
            <summary>Sets the shim of CurrentInterceptionRequest.get_ImplementationType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.ImplementationTypeSetType">
            <summary>Sets the shim of CurrentInterceptionRequest.set_ImplementationType(Type value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.InterceptorGet">
            <summary>Sets the shim of CurrentInterceptionRequest.get_Interceptor()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.InterceptorSetIInterceptor">
            <summary>Sets the shim of CurrentInterceptionRequest.set_Interceptor(IInterceptor value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.TypeToInterceptGet">
            <summary>Sets the shim of CurrentInterceptionRequest.get_TypeToIntercept()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.TypeToInterceptSetType">
            <summary>Sets the shim of CurrentInterceptionRequest.set_TypeToIntercept(Type value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.AllInstances.ImplementationTypeGet">
            <summary>Sets the shim of CurrentInterceptionRequest.get_ImplementationType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.AllInstances.ImplementationTypeSetType">
            <summary>Sets the shim of CurrentInterceptionRequest.set_ImplementationType(Type value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.AllInstances.InterceptorGet">
            <summary>Sets the shim of CurrentInterceptionRequest.get_Interceptor()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.AllInstances.InterceptorSetIInterceptor">
            <summary>Sets the shim of CurrentInterceptionRequest.set_Interceptor(IInterceptor value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.AllInstances.TypeToInterceptGet">
            <summary>Sets the shim of CurrentInterceptionRequest.get_TypeToIntercept()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCurrentInterceptionRequest.AllInstances.TypeToInterceptSetType">
            <summary>Sets the shim of CurrentInterceptionRequest.set_TypeToIntercept(Type value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.ConstructorTypeBoolean">
            <summary>Sets the shim of CustomAttributeMatchingRule.CustomAttributeMatchingRule(Type attributeType, Boolean inherited)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of CustomAttributeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimCustomAttributeMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of CustomAttributeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.ConstructorIInterceptionBehavior">
            <summary>Sets the shim of DefaultInterceptionBehavior.DefaultInterceptionBehavior(IInterceptionBehavior interceptionBehavior)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.ConstructorType">
            <summary>Sets the shim of DefaultInterceptionBehavior.DefaultInterceptionBehavior(Type behaviorType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.ConstructorTypeString">
            <summary>Sets the shim of DefaultInterceptionBehavior.DefaultInterceptionBehavior(Type behaviorType, String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.GetBehaviorsPolicyIPolicyListTypeString">
            <summary>Sets the shim of DefaultInterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior.AllInstances.GetBehaviorsPolicyIPolicyListTypeString">
            <summary>Sets the shim of DefaultInterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior`1">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior`1.#ctor(Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior`1.Constructor">
            <summary>Sets the shim of DefaultInterceptionBehavior`1.DefaultInterceptionBehavior`1()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior`1.ConstructorString">
            <summary>Sets the shim of DefaultInterceptionBehavior`1.DefaultInterceptionBehavior`1(String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptionBehavior`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.#ctor(Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.AddDefaultInstanceInterceptorTypeIPolicyList">
            <summary>Sets the shim of DefaultInterceptor.AddDefaultInstanceInterceptor(Type typeToIntercept, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.AddDefaultTypeInterceptorTypeIPolicyList">
            <summary>Sets the shim of DefaultInterceptor.AddDefaultTypeInterceptor(Type typeToIntercept, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the shim of DefaultInterceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.ConstructorIInterceptor">
            <summary>Sets the shim of DefaultInterceptor.DefaultInterceptor(IInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.ConstructorType">
            <summary>Sets the shim of DefaultInterceptor.DefaultInterceptor(Type interceptorType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.ConstructorTypeString">
            <summary>Sets the shim of DefaultInterceptor.DefaultInterceptor(Type interceptorType, String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.IsInstanceInterceptorGet">
            <summary>Sets the shim of DefaultInterceptor.get_IsInstanceInterceptor()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.AllInstances.AddDefaultInstanceInterceptorTypeIPolicyList">
            <summary>Sets the shim of DefaultInterceptor.AddDefaultInstanceInterceptor(Type typeToIntercept, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.AllInstances.AddDefaultTypeInterceptorTypeIPolicyList">
            <summary>Sets the shim of DefaultInterceptor.AddDefaultTypeInterceptor(Type typeToIntercept, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.AllInstances.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the shim of DefaultInterceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor.AllInstances.IsInstanceInterceptorGet">
            <summary>Sets the shim of DefaultInterceptor.get_IsInstanceInterceptor()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor`1">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor`1.#ctor(Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor`1.Constructor">
            <summary>Sets the shim of DefaultInterceptor`1.DefaultInterceptor`1()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor`1.ConstructorString">
            <summary>Sets the shim of DefaultInterceptor`1.DefaultInterceptor`1(String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimDefaultInterceptor`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.Bind(Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.ConstructorIInstanceInterceptor">
            <summary>Sets the shim of FixedInstanceInterceptionPolicy.FixedInstanceInterceptionPolicy(IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.GetInterceptorIBuilderContext">
            <summary>Sets the shim of FixedInstanceInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedInstanceInterceptionPolicy.AllInstances.GetInterceptorIBuilderContext">
            <summary>Sets the shim of FixedInstanceInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.Bind(Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.Bind(Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.ConstructorITypeInterceptor">
            <summary>Sets the shim of FixedTypeInterceptionPolicy.FixedTypeInterceptionPolicy(ITypeInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.GetInterceptorIBuilderContext">
            <summary>Sets the shim of FixedTypeInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.ProxyTypeGet">
            <summary>Sets the shim of FixedTypeInterceptionPolicy.get_ProxyType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.ProxyTypeSetType">
            <summary>Sets the shim of FixedTypeInterceptionPolicy.set_ProxyType(Type value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.AllInstances.GetInterceptorIBuilderContext">
            <summary>Sets the shim of FixedTypeInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.AllInstances.ProxyTypeGet">
            <summary>Sets the shim of FixedTypeInterceptionPolicy.get_ProxyType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimFixedTypeInterceptionPolicy.AllInstances.ProxyTypeSetType">
            <summary>Sets the shim of FixedTypeInterceptionPolicy.set_ProxyType(Type value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.Glob</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.#ctor(Microsoft.Practices.Unity.InterceptionExtension.Glob)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.ConstructorString">
            <summary>Sets the shim of Glob.Glob(String pattern)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.ConstructorStringBoolean">
            <summary>Sets the shim of Glob.Glob(String pattern, Boolean caseSensitive)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.GlobPatternToRegexStringBoolean">
            <summary>Sets the shim of Glob.GlobPatternToRegex(String pattern, Boolean caseSensitive)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.IsMatchString">
            <summary>Sets the shim of Glob.IsMatch(String s)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimGlob.AllInstances.IsMatchString">
            <summary>Sets the shim of Glob.IsMatch(String s)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.#ctor(Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.Constructor">
            <summary>Sets the shim of HandlerAttribute.HandlerAttribute()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.OrderGet">
            <summary>Sets the shim of HandlerAttribute.get_Order()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.OrderSetInt32">
            <summary>Sets the shim of HandlerAttribute.set_Order(Int32 value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.AllInstances.OrderGet">
            <summary>Sets the shim of HandlerAttribute.get_Order()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerAttribute.AllInstances.OrderSetInt32">
            <summary>Sets the shim of HandlerAttribute.set_Order(Int32 value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.#ctor(Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.Constructor">
            <summary>Sets the shim of HandlerPipeline.HandlerPipeline()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.ConstructorIEnumerableOfICallHandler">
            <summary>Sets the shim of HandlerPipeline.HandlerPipeline(IEnumerable`1&lt;ICallHandler&gt; handlers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.CountGet">
            <summary>Sets the shim of HandlerPipeline.get_Count()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.InvokeIMethodInvocationInvokeHandlerDelegate">
            <summary>Sets the shim of HandlerPipeline.Invoke(IMethodInvocation input, InvokeHandlerDelegate target)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.AllInstances.CountGet">
            <summary>Sets the shim of HandlerPipeline.get_Count()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipeline.AllInstances.InvokeIMethodInvocationInvokeHandlerDelegate">
            <summary>Sets the shim of HandlerPipeline.Invoke(IMethodInvocation input, InvokeHandlerDelegate target)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipelineKey">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipelineKey.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipelineKey.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipelineKey.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipelineKey.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipelineKey.EqualityOpHandlerPipelineKeyHandlerPipelineKey">
            <summary>Sets the shim of HandlerPipelineKey.op_Equality(HandlerPipelineKey left, HandlerPipelineKey right)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipelineKey.ForMethodMethodBase">
            <summary>Sets the shim of HandlerPipelineKey.ForMethod(MethodBase methodBase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipelineKey.InequalityOpHandlerPipelineKeyHandlerPipelineKey">
            <summary>Sets the shim of HandlerPipelineKey.op_Inequality(HandlerPipelineKey left, HandlerPipelineKey right)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimHandlerPipelineKey.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.Constructor">
            <summary>Sets the shim of InjectionPolicy.InjectionPolicy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.ConstructorString">
            <summary>Sets the shim of InjectionPolicy.InjectionPolicy(String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.DoesNotHaveNoPoliciesAttributeRuleMethodImplementationInfo">
            <summary>Sets the shim of InjectionPolicy.DoesNotHaveNoPoliciesAttributeRule(MethodImplementationInfo method)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.GetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the shim of InjectionPolicy.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.GetMethodSetMethodBase">
            <summary>Sets the shim of InjectionPolicy.GetMethodSet(MethodBase member)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.MatchesMethodImplementationInfo">
            <summary>Sets the shim of InjectionPolicy.Matches(MethodImplementationInfo member)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.NameGet">
            <summary>Sets the shim of InjectionPolicy.get_Name()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.AllInstances.DoesNotHaveNoPoliciesAttributeRuleMethodImplementationInfo">
            <summary>Sets the shim of InjectionPolicy.DoesNotHaveNoPoliciesAttributeRule(MethodImplementationInfo method)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.AllInstances.GetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the shim of InjectionPolicy.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.AllInstances.MatchesMethodImplementationInfo">
            <summary>Sets the shim of InjectionPolicy.Matches(MethodImplementationInfo member)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInjectionPolicy.AllInstances.NameGet">
            <summary>Sets the shim of InjectionPolicy.get_Name()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InstanceInterceptionStrategy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InstanceInterceptionStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.Bind(Microsoft.Practices.ObjectBuilder2.IBuilderStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.FindInterceptionPolicyOf1IBuilderContextBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Boolean,``0})">
            <summary>Sets the shim of InstanceInterceptionStrategy.FindInterceptionPolicy(IBuilderContext context, Boolean probeOriginalKey)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.Constructor">
            <summary>Sets the shim of InstanceInterceptionStrategy.InstanceInterceptionStrategy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.PostBuildUpIBuilderContext">
            <summary>Sets the shim of InstanceInterceptionStrategy.PostBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInstanceInterceptionStrategy.AllInstances.PostBuildUpIBuilderContext">
            <summary>Sets the shim of InstanceInterceptionStrategy.PostBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.Intercept</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.NewInstanceOf1ITypeInterceptorIEnumerableOfIInterceptionBehaviorObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Object[],``0})">
            <summary>Sets the shim of Intercept.NewInstance(ITypeInterceptor interceptor, IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors, Object[] constructorParameters)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.NewInstanceWithAdditionalInterfacesOf1ITypeInterceptorIEnumerableOfIInterceptionBehaviorIEnumerableOfTypeObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type},System.Object[],``0})">
            <summary>Sets the shim of Intercept.NewInstanceWithAdditionalInterfaces(ITypeInterceptor interceptor, IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors, IEnumerable`1&lt;Type&gt; additionalInterfaces, Object[] constructorParameters)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.ThroughProxyOf1M0IInstanceInterceptorIEnumerableOfIInterceptionBehavior``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},``0})">
            <summary>Sets the shim of Intercept.ThroughProxy(!!0 target, IInstanceInterceptor interceptor, IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.ThroughProxyWithAdditionalInterfacesOf1M0IInstanceInterceptorIEnumerableOfIInterceptionBehaviorIEnumerableOfType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type},``0})">
            <summary>Sets the shim of Intercept.ThroughProxyWithAdditionalInterfaces(!!0 target, IInstanceInterceptor interceptor, IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors, IEnumerable`1&lt;Type&gt; additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.CheckInterfacesIEnumerableOfTypeStringFuncOfStringString">
            <summary>Sets the shim of Intercept.CheckInterfaces(IEnumerable`1&lt;Type&gt; interfaces, String argumentName, Func`2&lt;String,String&gt; messageFormatter)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.GetAllAdditionalInterfacesIEnumerableOfIInterceptionBehaviorIEnumerableOfType">
            <summary>Sets the shim of Intercept.GetAllAdditionalInterfaces(IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors, IEnumerable`1&lt;Type&gt; additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.NewInstanceTypeITypeInterceptorIEnumerableOfIInterceptionBehaviorObjectArray">
            <summary>Sets the shim of Intercept.NewInstance(Type type, ITypeInterceptor interceptor, IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors, Object[] constructorParameters)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.NewInstanceWithAdditionalInterfacesTypeITypeInterceptorIEnumerableOfIInterceptionBehaviorIEnumerableOfTypeObjectArray">
            <summary>Sets the shim of Intercept.NewInstanceWithAdditionalInterfaces(Type type, ITypeInterceptor interceptor, IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors, IEnumerable`1&lt;Type&gt; additionalInterfaces, Object[] constructorParameters)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.ThroughProxyTypeObjectIInstanceInterceptorIEnumerableOfIInterceptionBehavior">
            <summary>Sets the shim of Intercept.ThroughProxy(Type interceptedType, Object target, IInstanceInterceptor interceptor, IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept.ThroughProxyWithAdditionalInterfacesTypeObjectIInstanceInterceptorIEnumerableOfIInterceptionBehaviorIEnumerableOfType">
            <summary>Sets the shim of Intercept.ThroughProxyWithAdditionalInterfaces(Type interceptedType, Object target, IInstanceInterceptor interceptor, IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors, IEnumerable`1&lt;Type&gt; additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept._GetAllAdditionalInterfacesb__8IInterceptionBehavior">
            <summary>Sets the shim of Intercept.&lt;GetAllAdditionalInterfaces&gt;b__8(IInterceptionBehavior ib)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept._GetAllAdditionalInterfacesb__aString">
            <summary>Sets the shim of Intercept.&lt;GetAllAdditionalInterfaces&gt;b__a(String error)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept._NewInstanceWithAdditionalInterfacesb__4IInterceptionBehavior">
            <summary>Sets the shim of Intercept.&lt;NewInstanceWithAdditionalInterfaces&gt;b__4(IInterceptionBehavior ib)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept._NewInstanceWithAdditionalInterfacesb__5IInterceptionBehavior">
            <summary>Sets the shim of Intercept.&lt;NewInstanceWithAdditionalInterfaces&gt;b__5(IInterceptionBehavior ib)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept._ThroughProxyWithAdditionalInterfacesb__0IInterceptionBehavior">
            <summary>Sets the shim of Intercept.&lt;ThroughProxyWithAdditionalInterfaces&gt;b__0(IInterceptionBehavior ib)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimIntercept._ThroughProxyWithAdditionalInterfacesb__1IInterceptionBehavior">
            <summary>Sets the shim of Intercept.&lt;ThroughProxyWithAdditionalInterfaces&gt;b__1(IInterceptionBehavior ib)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AddConstructorConstructorInfo">
            <summary>Sets the shim of InterceptingClassGenerator.AddConstructor(ConstructorInfo ctor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AddConstructors">
            <summary>Sets the shim of InterceptingClassGenerator.AddConstructors()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AddEvents">
            <summary>Sets the shim of InterceptingClassGenerator.AddEvents()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AddMethods">
            <summary>Sets the shim of InterceptingClassGenerator.AddMethods()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AddProperties">
            <summary>Sets the shim of InterceptingClassGenerator.AddProperties()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AddToImplementedInterfacesTypeHashSetOfType">
            <summary>Sets the shim of InterceptingClassGenerator.AddToImplementedInterfaces(Type type, HashSet`1&lt;Type&gt; implementedInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.ConstructorTypeTypeArray">
            <summary>Sets the shim of InterceptingClassGenerator.InterceptingClassGenerator(Type typeToIntercept, Type[] additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.CreateTypeBuilder">
            <summary>Sets the shim of InterceptingClassGenerator.CreateTypeBuilder()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.DefineGenericArgumentsTypeBuilderType">
            <summary>Sets the shim of InterceptingClassGenerator.DefineGenericArguments(TypeBuilder typeBuilder, Type baseClass)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.FilterTypeAttributesTypeAttributes">
            <summary>Sets the shim of InterceptingClassGenerator.FilterTypeAttributes(TypeAttributes attributes)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.GenerateType">
            <summary>Sets the shim of InterceptingClassGenerator.GenerateType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.GetGenericTypeType">
            <summary>Sets the shim of InterceptingClassGenerator.GetGenericType(Type typeToIntercept)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.GetImplementedInterfacesSet">
            <summary>Sets the shim of InterceptingClassGenerator.GetImplementedInterfacesSet()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.GetMethodsToIntercept">
            <summary>Sets the shim of InterceptingClassGenerator.GetMethodsToIntercept()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.GetModuleBuilder">
            <summary>Sets the shim of InterceptingClassGenerator.GetModuleBuilder()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.OverrideEventMethodMethodInfoInt32">
            <summary>Sets the shim of InterceptingClassGenerator.OverrideEventMethod(MethodInfo method, Int32 count)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.OverridePropertyMethodMethodInfoInt32">
            <summary>Sets the shim of InterceptingClassGenerator.OverridePropertyMethod(MethodInfo method, Int32 count)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.StaticConstructor">
            <summary>Sets the shim of InterceptingClassGenerator.InterceptingClassGenerator()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator._AddConstructorb__8ParameterInfo">
            <summary>Sets the shim of InterceptingClassGenerator.&lt;AddConstructor&gt;b__8(ParameterInfo item)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator._DefineGenericArgumentsb__aType">
            <summary>Sets the shim of InterceptingClassGenerator.&lt;DefineGenericArguments&gt;b__a(Type t)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.AddConstructorConstructorInfo">
            <summary>Sets the shim of InterceptingClassGenerator.AddConstructor(ConstructorInfo ctor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.AddConstructors">
            <summary>Sets the shim of InterceptingClassGenerator.AddConstructors()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.AddEvents">
            <summary>Sets the shim of InterceptingClassGenerator.AddEvents()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.AddMethods">
            <summary>Sets the shim of InterceptingClassGenerator.AddMethods()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.AddProperties">
            <summary>Sets the shim of InterceptingClassGenerator.AddProperties()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.CreateTypeBuilder">
            <summary>Sets the shim of InterceptingClassGenerator.CreateTypeBuilder()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.GenerateType">
            <summary>Sets the shim of InterceptingClassGenerator.GenerateType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.GetImplementedInterfacesSet">
            <summary>Sets the shim of InterceptingClassGenerator.GetImplementedInterfacesSet()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.GetMethodsToIntercept">
            <summary>Sets the shim of InterceptingClassGenerator.GetMethodsToIntercept()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.OverrideEventMethodMethodInfoInt32">
            <summary>Sets the shim of InterceptingClassGenerator.OverrideEventMethod(MethodInfo method, Int32 count)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingClassGenerator.AllInstances.OverridePropertyMethodMethodInfoInt32">
            <summary>Sets the shim of InterceptingClassGenerator.OverridePropertyMethod(MethodInfo method, Int32 count)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AddInterceptionBehaviorIInterceptionBehavior">
            <summary>Sets the shim of InterceptingRealProxy.AddInterceptionBehavior(IInterceptionBehavior interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.CanCastToTypeObject">
            <summary>Sets the shim of InterceptingRealProxy.CanCastTo(Type fromType, Object o)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.CheckAdditionalInterfacesTypeArray">
            <summary>Sets the shim of InterceptingRealProxy.CheckAdditionalInterfaces(Type[] interfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.ConstructorObjectTypeTypeArray">
            <summary>Sets the shim of InterceptingRealProxy.InterceptingRealProxy(Object target, Type classToProxy, Type[] additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.ExecuteAddInterceptionBehaviorIMethodCallMessage">
            <summary>Sets the shim of InterceptingRealProxy.ExecuteAddInterceptionBehavior(IMethodCallMessage callMessage)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.HandleInterceptingProxyMethodIMethodCallMessage">
            <summary>Sets the shim of InterceptingRealProxy.HandleInterceptingProxyMethod(IMethodCallMessage callMessage)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.InvokeIMessage">
            <summary>Sets the shim of InterceptingRealProxy.Invoke(IMessage msg)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.TargetGet">
            <summary>Sets the shim of InterceptingRealProxy.get_Target()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.TypeNameGet">
            <summary>Sets the shim of InterceptingRealProxy.get_TypeName()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.TypeNameSetString">
            <summary>Sets the shim of InterceptingRealProxy.set_TypeName(String value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AllInstances.AddInterceptionBehaviorIInterceptionBehavior">
            <summary>Sets the shim of InterceptingRealProxy.AddInterceptionBehavior(IInterceptionBehavior interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AllInstances.CanCastToTypeObject">
            <summary>Sets the shim of InterceptingRealProxy.CanCastTo(Type fromType, Object o)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AllInstances.ExecuteAddInterceptionBehaviorIMethodCallMessage">
            <summary>Sets the shim of InterceptingRealProxy.ExecuteAddInterceptionBehavior(IMethodCallMessage callMessage)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AllInstances.HandleInterceptingProxyMethodIMethodCallMessage">
            <summary>Sets the shim of InterceptingRealProxy.HandleInterceptingProxyMethod(IMethodCallMessage callMessage)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AllInstances.InvokeIMessage">
            <summary>Sets the shim of InterceptingRealProxy.Invoke(IMessage msg)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AllInstances.TargetGet">
            <summary>Sets the shim of InterceptingRealProxy.get_Target()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AllInstances.TypeNameGet">
            <summary>Sets the shim of InterceptingRealProxy.get_TypeName()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptingRealProxy.AllInstances.TypeNameSetString">
            <summary>Sets the shim of InterceptingRealProxy.set_TypeName(String value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.Interception</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.#ctor(Microsoft.Practices.Unity.InterceptionExtension.Interception)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.Bind(Microsoft.Practices.Unity.IUnityContainerExtensionConfigurator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetDefaultInterceptorForOf1IInstanceInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetDefaultInterceptorFor(IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetDefaultInterceptorForOf1ITypeInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetDefaultInterceptorFor(ITypeInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetInterceptorForOf1IInstanceInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetInterceptorFor(IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetInterceptorForOf1ITypeInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetInterceptorFor(ITypeInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetInterceptorForOf1StringIInstanceInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetInterceptorFor(String name, IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetInterceptorForOf1StringITypeInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetInterceptorFor(String name, ITypeInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AddPolicyString">
            <summary>Sets the shim of Interception.AddPolicy(String policyName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.Constructor">
            <summary>Sets the shim of Interception.Interception()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.GuardTypeInterceptableTypeIInterceptor">
            <summary>Sets the shim of Interception.GuardTypeInterceptable(Type typeToIntercept, IInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.Initialize">
            <summary>Sets the shim of Interception.Initialize()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetDefaultInterceptorForTypeIInstanceInterceptor">
            <summary>Sets the shim of Interception.SetDefaultInterceptorFor(Type typeToIntercept, IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetDefaultInterceptorForTypeITypeInterceptor">
            <summary>Sets the shim of Interception.SetDefaultInterceptorFor(Type typeToIntercept, ITypeInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetInterceptorForTypeIInstanceInterceptor">
            <summary>Sets the shim of Interception.SetInterceptorFor(Type typeToIntercept, IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetInterceptorForTypeITypeInterceptor">
            <summary>Sets the shim of Interception.SetInterceptorFor(Type typeToIntercept, ITypeInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetInterceptorForTypeStringIInstanceInterceptor">
            <summary>Sets the shim of Interception.SetInterceptorFor(Type typeToIntercept, String name, IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.SetInterceptorForTypeStringITypeInterceptor">
            <summary>Sets the shim of Interception.SetInterceptorFor(Type typeToIntercept, String name, ITypeInterceptor interceptor)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetDefaultInterceptorForOf1IInstanceInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.Interception,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetDefaultInterceptorFor(IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetDefaultInterceptorForOf1ITypeInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.Interception,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetDefaultInterceptorFor(ITypeInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetInterceptorForOf1IInstanceInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.Interception,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetInterceptorFor(IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetInterceptorForOf1ITypeInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.Interception,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetInterceptorFor(ITypeInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetInterceptorForOf1StringIInstanceInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.Interception,System.String,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetInterceptorFor(String name, IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetInterceptorForOf1StringITypeInterceptor``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.Interception,System.String,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,Microsoft.Practices.Unity.InterceptionExtension.Interception})">
            <summary>Sets the shim of Interception.SetInterceptorFor(String name, ITypeInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.AddPolicyString">
            <summary>Sets the shim of Interception.AddPolicy(String policyName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.Initialize">
            <summary>Sets the shim of Interception.Initialize()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetDefaultInterceptorForTypeIInstanceInterceptor">
            <summary>Sets the shim of Interception.SetDefaultInterceptorFor(Type typeToIntercept, IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetDefaultInterceptorForTypeITypeInterceptor">
            <summary>Sets the shim of Interception.SetDefaultInterceptorFor(Type typeToIntercept, ITypeInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetInterceptorForTypeIInstanceInterceptor">
            <summary>Sets the shim of Interception.SetInterceptorFor(Type typeToIntercept, IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetInterceptorForTypeITypeInterceptor">
            <summary>Sets the shim of Interception.SetInterceptorFor(Type typeToIntercept, ITypeInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetInterceptorForTypeStringIInstanceInterceptor">
            <summary>Sets the shim of Interception.SetInterceptorFor(Type typeToIntercept, String name, IInstanceInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterception.AllInstances.SetInterceptorForTypeStringITypeInterceptor">
            <summary>Sets the shim of Interception.SetInterceptorFor(Type typeToIntercept, String name, ITypeInterceptor interceptor)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.ConstructorIInterceptionBehavior">
            <summary>Sets the shim of InterceptionBehavior.InterceptionBehavior(IInterceptionBehavior interceptionBehavior)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.ConstructorType">
            <summary>Sets the shim of InterceptionBehavior.InterceptionBehavior(Type behaviorType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.ConstructorTypeString">
            <summary>Sets the shim of InterceptionBehavior.InterceptionBehavior(Type behaviorType, String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.GetBehaviorsPolicyIPolicyListTypeString">
            <summary>Sets the shim of InterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior.AllInstances.GetBehaviorsPolicyIPolicyListTypeString">
            <summary>Sets the shim of InterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior`1">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior`1.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior`1.Constructor">
            <summary>Sets the shim of InterceptionBehavior`1.InterceptionBehavior`1()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior`1.ConstructorString">
            <summary>Sets the shim of InterceptionBehavior`1.InterceptionBehavior`1(String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehavior`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.AddExplicitBehaviorPoliciesTypeStringIPolicyList">
            <summary>Sets the shim of InterceptionBehaviorBase.AddExplicitBehaviorPolicies(Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.AddKeyedPoliciesTypeStringIPolicyList">
            <summary>Sets the shim of InterceptionBehaviorBase.AddKeyedPolicies(Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the shim of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.ConstructorIInterceptionBehavior">
            <summary>Sets the shim of InterceptionBehaviorBase.InterceptionBehaviorBase(IInterceptionBehavior interceptionBehavior)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.ConstructorType">
            <summary>Sets the shim of InterceptionBehaviorBase.InterceptionBehaviorBase(Type behaviorType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.ConstructorTypeString">
            <summary>Sets the shim of InterceptionBehaviorBase.InterceptionBehaviorBase(Type behaviorType, String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.AllInstances.AddExplicitBehaviorPoliciesTypeStringIPolicyList">
            <summary>Sets the shim of InterceptionBehaviorBase.AddExplicitBehaviorPolicies(Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.AllInstances.AddKeyedPoliciesTypeStringIPolicyList">
            <summary>Sets the shim of InterceptionBehaviorBase.AddKeyedPolicies(Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorBase.AllInstances.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the shim of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.AddIInterceptionBehavior">
            <summary>Sets the shim of InterceptionBehaviorPipeline.Add(IInterceptionBehavior interceptionBehavior)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.Constructor">
            <summary>Sets the shim of InterceptionBehaviorPipeline.InterceptionBehaviorPipeline()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.ConstructorIEnumerableOfIInterceptionBehavior">
            <summary>Sets the shim of InterceptionBehaviorPipeline.InterceptionBehaviorPipeline(IEnumerable`1&lt;IInterceptionBehavior&gt; interceptionBehaviors)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.CountGet">
            <summary>Sets the shim of InterceptionBehaviorPipeline.get_Count()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.InvokeIMethodInvocationInvokeInterceptionBehaviorDelegate">
            <summary>Sets the shim of InterceptionBehaviorPipeline.Invoke(IMethodInvocation input, InvokeInterceptionBehaviorDelegate target)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.AllInstances.AddIInterceptionBehavior">
            <summary>Sets the shim of InterceptionBehaviorPipeline.Add(IInterceptionBehavior interceptionBehavior)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.AllInstances.CountGet">
            <summary>Sets the shim of InterceptionBehaviorPipeline.get_Count()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorPipeline.AllInstances.InvokeIMethodInvocationInvokeInterceptionBehaviorDelegate">
            <summary>Sets the shim of InterceptionBehaviorPipeline.Invoke(IMethodInvocation input, InvokeInterceptionBehaviorDelegate target)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.Bind(Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.AddBehaviorKeyNamedTypeBuildKey">
            <summary>Sets the shim of InterceptionBehaviorsPolicy.AddBehaviorKey(NamedTypeBuildKey key)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.BehaviorKeysGet">
            <summary>Sets the shim of InterceptionBehaviorsPolicy.get_BehaviorKeys()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.Constructor">
            <summary>Sets the shim of InterceptionBehaviorsPolicy.InterceptionBehaviorsPolicy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.GetEffectiveBehaviorsIBuilderContextIInterceptorTypeType">
            <summary>Sets the shim of InterceptionBehaviorsPolicy.GetEffectiveBehaviors(IBuilderContext context, IInterceptor interceptor, Type typeToIntercept, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.GetOrCreateIPolicyListTypeString">
            <summary>Sets the shim of InterceptionBehaviorsPolicy.GetOrCreate(IPolicyList policies, Type typeToCreate, String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.AllInstances.AddBehaviorKeyNamedTypeBuildKey">
            <summary>Sets the shim of InterceptionBehaviorsPolicy.AddBehaviorKey(NamedTypeBuildKey key)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.AllInstances.BehaviorKeysGet">
            <summary>Sets the shim of InterceptionBehaviorsPolicy.get_BehaviorKeys()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionBehaviorsPolicy.AllInstances.GetEffectiveBehaviorsIBuilderContextIInterceptorTypeType">
            <summary>Sets the shim of InterceptionBehaviorsPolicy.GetEffectiveBehaviors(IBuilderContext context, IInterceptor interceptor, Type typeToIntercept, Type implementationType)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionMember">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionMember</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionMember.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterceptionMember)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionMember.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionMember.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionMember.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionMember.Constructor">
            <summary>Sets the shim of InterceptionMember.InterceptionMember()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptionMember.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.Interceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.#ctor(Microsoft.Practices.Unity.InterceptionExtension.Interceptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the shim of Interceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.ConstructorIInterceptor">
            <summary>Sets the shim of Interceptor.Interceptor(IInterceptor interceptor)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.ConstructorType">
            <summary>Sets the shim of Interceptor.Interceptor(Type interceptorType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.ConstructorTypeString">
            <summary>Sets the shim of Interceptor.Interceptor(Type interceptorType, String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.CreateInstanceInterceptionPolicy">
            <summary>Sets the shim of Interceptor.CreateInstanceInterceptionPolicy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.CreateTypeInterceptionPolicy">
            <summary>Sets the shim of Interceptor.CreateTypeInterceptionPolicy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.IsInstanceInterceptorGet">
            <summary>Sets the shim of Interceptor.get_IsInstanceInterceptor()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.AllInstances.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the shim of Interceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.AllInstances.CreateInstanceInterceptionPolicy">
            <summary>Sets the shim of Interceptor.CreateInstanceInterceptionPolicy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.AllInstances.CreateTypeInterceptionPolicy">
            <summary>Sets the shim of Interceptor.CreateTypeInterceptionPolicy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor.AllInstances.IsInstanceInterceptorGet">
            <summary>Sets the shim of Interceptor.get_IsInstanceInterceptor()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor`1">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor`1.#ctor(Microsoft.Practices.Unity.InterceptionExtension.Interceptor{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor`1.Constructor">
            <summary>Sets the shim of Interceptor`1.Interceptor`1()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor`1.ConstructorString">
            <summary>Sets the shim of Interceptor`1.Interceptor`1(String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterceptor`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.CanInterceptType">
            <summary>Sets the shim of InterfaceInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.Constructor">
            <summary>Sets the shim of InterfaceInterceptor.InterfaceInterceptor()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.CreateProxyTypeObjectTypeArray">
            <summary>Sets the shim of InterfaceInterceptor.CreateProxy(Type t, Object target, Type[] additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.DoGetInterceptableMethodsTypeType">
            <summary>Sets the shim of InterfaceInterceptor.DoGetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.GetInterceptableMethodsTypeType">
            <summary>Sets the shim of InterfaceInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.StaticConstructor">
            <summary>Sets the shim of InterfaceInterceptor.InterfaceInterceptor()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.AllInstances.CanInterceptType">
            <summary>Sets the shim of InterfaceInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.AllInstances.CreateProxyTypeObjectTypeArray">
            <summary>Sets the shim of InterfaceInterceptor.CreateProxy(Type t, Object target, Type[] additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.AllInstances.DoGetInterceptableMethodsTypeType">
            <summary>Sets the shim of InterfaceInterceptor.DoGetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptor.AllInstances.GetInterceptableMethodsTypeType">
            <summary>Sets the shim of InterfaceInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.AddConstructor">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.AddConstructor()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.CheckAdditionalInterfacesIEnumerableOfType">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.CheckAdditionalInterfaces(IEnumerable`1&lt;Type&gt; additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.ConstructorTypeIEnumerableOfType">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.InterfaceInterceptorClassGenerator(Type typeToIntercept, IEnumerable`1&lt;Type&gt; additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.CreateProxyType">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.CreateProxyType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.CreateTypeBuilder">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.CreateTypeBuilder()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.CreateTypeName">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.CreateTypeName()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.DefineGenericArguments">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.DefineGenericArguments()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.GetModuleBuilder">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.GetModuleBuilder()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.StaticConstructor">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.InterfaceInterceptorClassGenerator()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator._DefineGenericArgumentsb__0Type">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.&lt;DefineGenericArguments&gt;b__0(Type t)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.AllInstances.AddConstructor">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.AddConstructor()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.AllInstances.CreateProxyType">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.CreateProxyType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.AllInstances.CreateTypeBuilder">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.CreateTypeBuilder()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.AllInstances.CreateTypeName">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.CreateTypeName()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceInterceptorClassGenerator.AllInstances.DefineGenericArguments">
            <summary>Sets the shim of InterfaceInterceptorClassGenerator.DefineGenericArguments()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.InterfaceMethodOverride</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InterfaceMethodOverride)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.AddMethod">
            <summary>Sets the shim of InterfaceMethodOverride.AddMethod()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.BuildAdditionalInterfaceNonImplementedException">
            <summary>Sets the shim of InterfaceMethodOverride.BuildAdditionalInterfaceNonImplementedException()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.ConstructorTypeBuilderFieldBuilderFieldBuilderMethodInfoBooleanInt32">
            <summary>Sets the shim of InterfaceMethodOverride.InterfaceMethodOverride(TypeBuilder typeBuilder, FieldBuilder proxyInterceptionPipelineField, FieldBuilder targetField, MethodInfo methodToOverride, Boolean explicitImplementation, Int32 overrideCount)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.CreateDelegateImplementation">
            <summary>Sets the shim of InterfaceMethodOverride.CreateDelegateImplementation()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.CreateMethodNameString">
            <summary>Sets the shim of InterfaceMethodOverride.CreateMethodName(String purpose)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.CreateMethodOverrideMethodBuilder">
            <summary>Sets the shim of InterfaceMethodOverride.CreateMethodOverride(MethodBuilder delegateMethod)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.EmitBoxILGeneratorType">
            <summary>Sets the shim of InterfaceMethodOverride.EmitBox(ILGenerator il, Type typeOnStack)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.EmitLoadArgumentILGeneratorInt32">
            <summary>Sets the shim of InterfaceMethodOverride.EmitLoadArgument(ILGenerator il, Int32 argumentNumber)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.EmitLoadConstantILGeneratorInt32">
            <summary>Sets the shim of InterfaceMethodOverride.EmitLoadConstant(ILGenerator il, Int32 i)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.EmitUnboxOrCastILGeneratorType">
            <summary>Sets the shim of InterfaceMethodOverride.EmitUnboxOrCast(ILGenerator il, Type targetType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.MethodHasReturnValueGet">
            <summary>Sets the shim of InterfaceMethodOverride.get_MethodHasReturnValue()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.ReturnTypeGet">
            <summary>Sets the shim of InterfaceMethodOverride.get_ReturnType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.StaticConstructor">
            <summary>Sets the shim of InterfaceMethodOverride.InterfaceMethodOverride()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.AllInstances.AddMethod">
            <summary>Sets the shim of InterfaceMethodOverride.AddMethod()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.AllInstances.CreateDelegateImplementation">
            <summary>Sets the shim of InterfaceMethodOverride.CreateDelegateImplementation()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.AllInstances.CreateMethodNameString">
            <summary>Sets the shim of InterfaceMethodOverride.CreateMethodName(String purpose)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.AllInstances.CreateMethodOverrideMethodBuilder">
            <summary>Sets the shim of InterfaceMethodOverride.CreateMethodOverride(MethodBuilder delegateMethod)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.AllInstances.MethodHasReturnValueGet">
            <summary>Sets the shim of InterfaceMethodOverride.get_MethodHasReturnValue()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimInterfaceMethodOverride.AllInstances.ReturnTypeGet">
            <summary>Sets the shim of InterfaceMethodOverride.get_ReturnType()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.#ctor(Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.Constructor">
            <summary>Sets the shim of MatchingInfo.MatchingInfo()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.ConstructorString">
            <summary>Sets the shim of MatchingInfo.MatchingInfo(String nameToMatch)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.ConstructorStringBoolean">
            <summary>Sets the shim of MatchingInfo.MatchingInfo(String nameToMatch, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.IgnoreCaseGet">
            <summary>Sets the shim of MatchingInfo.get_IgnoreCase()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.IgnoreCaseSetBoolean">
            <summary>Sets the shim of MatchingInfo.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.MatchGet">
            <summary>Sets the shim of MatchingInfo.get_Match()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.MatchSetString">
            <summary>Sets the shim of MatchingInfo.set_Match(String value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.AllInstances.IgnoreCaseGet">
            <summary>Sets the shim of MatchingInfo.get_IgnoreCase()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.AllInstances.IgnoreCaseSetBoolean">
            <summary>Sets the shim of MatchingInfo.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.AllInstances.MatchGet">
            <summary>Sets the shim of MatchingInfo.get_Match()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingInfo.AllInstances.MatchSetString">
            <summary>Sets the shim of MatchingInfo.set_Match(String value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.MatchingRuleSet</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.#ctor(Microsoft.Practices.Unity.InterceptionExtension.MatchingRuleSet)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Bind(System.Collections.IList)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Bind(System.Collections.Generic.ICollection{Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Bind(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Bind(System.Collections.Generic.IList{Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Bind(System.Collections.Generic.IReadOnlyCollection{Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Bind(System.Collections.Generic.IReadOnlyList{Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.Constructor">
            <summary>Sets the shim of MatchingRuleSet.MatchingRuleSet()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.MatchesMethodBase">
            <summary>Sets the shim of MatchingRuleSet.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMatchingRuleSet.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of MatchingRuleSet.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.ConstructorIEnumerableOfMatchingInfo">
            <summary>Sets the shim of MemberNameMatchingRule.MemberNameMatchingRule(IEnumerable`1&lt;MatchingInfo&gt; matches)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.ConstructorIEnumerableOfString">
            <summary>Sets the shim of MemberNameMatchingRule.MemberNameMatchingRule(IEnumerable`1&lt;String&gt; namesToMatch)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.ConstructorIEnumerableOfStringBoolean">
            <summary>Sets the shim of MemberNameMatchingRule.MemberNameMatchingRule(IEnumerable`1&lt;String&gt; namesToMatch, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.ConstructorString">
            <summary>Sets the shim of MemberNameMatchingRule.MemberNameMatchingRule(String nameToMatch)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.ConstructorStringBoolean">
            <summary>Sets the shim of MemberNameMatchingRule.MemberNameMatchingRule(String nameToMatch, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of MemberNameMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMemberNameMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of MemberNameMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.#ctor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.ConstructorMethodInfoMethodInfo">
            <summary>Sets the shim of MethodImplementationInfo.MethodImplementationInfo(MethodInfo interfaceMethodInfo, MethodInfo implementationMethodInfo)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.EqualityOpMethodImplementationInfoMethodImplementationInfo">
            <summary>Sets the shim of MethodImplementationInfo.op_Equality(MethodImplementationInfo left, MethodImplementationInfo right)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.EqualsObject">
            <summary>Sets the shim of MethodImplementationInfo.Equals(Object obj)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.GetHashCode">
            <summary>Sets the shim of MethodImplementationInfo.GetHashCode()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.ImplementationMethodInfoGet">
            <summary>Sets the shim of MethodImplementationInfo.get_ImplementationMethodInfo()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.InequalityOpMethodImplementationInfoMethodImplementationInfo">
            <summary>Sets the shim of MethodImplementationInfo.op_Inequality(MethodImplementationInfo left, MethodImplementationInfo right)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.InterfaceMethodInfoGet">
            <summary>Sets the shim of MethodImplementationInfo.get_InterfaceMethodInfo()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.ToString">
            <summary>Sets the shim of MethodImplementationInfo.ToString()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.AllInstances.EqualsObject">
            <summary>Sets the shim of MethodImplementationInfo.Equals(Object obj)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.AllInstances.GetHashCode01">
            <summary>Sets the shim of MethodImplementationInfo.GetHashCode()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.AllInstances.ImplementationMethodInfoGet">
            <summary>Sets the shim of MethodImplementationInfo.get_ImplementationMethodInfo()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.AllInstances.InterfaceMethodInfoGet">
            <summary>Sets the shim of MethodImplementationInfo.get_InterfaceMethodInfo()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodImplementationInfo.AllInstances.ToString01">
            <summary>Sets the shim of MethodImplementationInfo.ToString()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.MethodOverride</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.#ctor(Microsoft.Practices.Unity.InterceptionExtension.MethodOverride)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.AddMethod">
            <summary>Sets the shim of MethodOverride.AddMethod()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.BuildAbstractMethodInvokedException">
            <summary>Sets the shim of MethodOverride.BuildAbstractMethodInvokedException()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.ConstructorTypeBuilderFieldBuilderMethodInfoInt32">
            <summary>Sets the shim of MethodOverride.MethodOverride(TypeBuilder typeBuilder, FieldBuilder proxyInterceptionPipelineField, MethodInfo methodToOverride, Int32 overrideCount)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.CreateDelegateImplementationMethodInfo">
            <summary>Sets the shim of MethodOverride.CreateDelegateImplementation(MethodInfo callBaseMethod)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.CreateMethodNameString">
            <summary>Sets the shim of MethodOverride.CreateMethodName(String purpose)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.CreateMethodOverrideMethodBuilder">
            <summary>Sets the shim of MethodOverride.CreateMethodOverride(MethodBuilder delegateMethod)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.EmitBoxILGeneratorType">
            <summary>Sets the shim of MethodOverride.EmitBox(ILGenerator il, Type typeOnStack)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.EmitLoadArgumentILGeneratorInt32">
            <summary>Sets the shim of MethodOverride.EmitLoadArgument(ILGenerator il, Int32 argumentNumber)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.EmitLoadConstantILGeneratorInt32">
            <summary>Sets the shim of MethodOverride.EmitLoadConstant(ILGenerator il, Int32 i)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.EmitUnboxOrCastILGeneratorType">
            <summary>Sets the shim of MethodOverride.EmitUnboxOrCast(ILGenerator il, Type typeOnStack)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.MethodCanBeInterceptedMethodInfo">
            <summary>Sets the shim of MethodOverride.MethodCanBeIntercepted(MethodInfo method)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.MethodHasReturnValueGet">
            <summary>Sets the shim of MethodOverride.get_MethodHasReturnValue()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.OutputParameterIndicesGet">
            <summary>Sets the shim of MethodOverride.get_OutputParameterIndices()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.ReturnTypeGet">
            <summary>Sets the shim of MethodOverride.get_ReturnType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.StaticConstructor">
            <summary>Sets the shim of MethodOverride.MethodOverride()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.AllInstances.AddMethod">
            <summary>Sets the shim of MethodOverride.AddMethod()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.AllInstances.CreateDelegateImplementationMethodInfo">
            <summary>Sets the shim of MethodOverride.CreateDelegateImplementation(MethodInfo callBaseMethod)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.AllInstances.CreateMethodNameString">
            <summary>Sets the shim of MethodOverride.CreateMethodName(String purpose)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.AllInstances.CreateMethodOverrideMethodBuilder">
            <summary>Sets the shim of MethodOverride.CreateMethodOverride(MethodBuilder delegateMethod)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.AllInstances.MethodHasReturnValueGet">
            <summary>Sets the shim of MethodOverride.get_MethodHasReturnValue()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.AllInstances.OutputParameterIndicesGet">
            <summary>Sets the shim of MethodOverride.get_OutputParameterIndices()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodOverride.AllInstances.ReturnTypeGet">
            <summary>Sets the shim of MethodOverride.get_ReturnType()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.ConstructorIEnumerableOfString">
            <summary>Sets the shim of MethodSignatureMatchingRule.MethodSignatureMatchingRule(IEnumerable`1&lt;String&gt; parameterTypeNames)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.ConstructorIEnumerableOfStringBoolean">
            <summary>Sets the shim of MethodSignatureMatchingRule.MethodSignatureMatchingRule(IEnumerable`1&lt;String&gt; parameterTypeNames, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.ConstructorStringIEnumerableOfString">
            <summary>Sets the shim of MethodSignatureMatchingRule.MethodSignatureMatchingRule(String methodName, IEnumerable`1&lt;String&gt; parameterTypeNames)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.ConstructorStringIEnumerableOfStringBoolean">
            <summary>Sets the shim of MethodSignatureMatchingRule.MethodSignatureMatchingRule(String methodName, IEnumerable`1&lt;String&gt; parameterTypeNames, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of MethodSignatureMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimMethodSignatureMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of MethodSignatureMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.ConstructorIEnumerableOfMatchingInfo">
            <summary>Sets the shim of NamespaceMatchingRule.NamespaceMatchingRule(IEnumerable`1&lt;MatchingInfo&gt; matches)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.ConstructorString">
            <summary>Sets the shim of NamespaceMatchingRule.NamespaceMatchingRule(String namespaceName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.ConstructorStringBoolean">
            <summary>Sets the shim of NamespaceMatchingRule.NamespaceMatchingRule(String namespaceName, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of NamespaceMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimNamespaceMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of NamespaceMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.Bind(Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.Bind(System.Collections.IList)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AddObject">
            <summary>Sets the shim of ParameterCollection.Add(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.Clear">
            <summary>Sets the shim of ParameterCollection.Clear()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.ConstructorObjectArrayParameterInfoArrayPredicateOfParameterInfo">
            <summary>Sets the shim of ParameterCollection.ParameterCollection(Object[] arguments, ParameterInfo[] argumentInfo, Predicate`1&lt;ParameterInfo&gt; isArgumentPartOfCollection)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.ContainsObject">
            <summary>Sets the shim of ParameterCollection.Contains(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.CopyToArrayInt32">
            <summary>Sets the shim of ParameterCollection.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.CountGet">
            <summary>Sets the shim of ParameterCollection.get_Count()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.GetEnumerator">
            <summary>Sets the shim of ParameterCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.GetParameterInfoInt32">
            <summary>Sets the shim of ParameterCollection.GetParameterInfo(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.GetParameterInfoString">
            <summary>Sets the shim of ParameterCollection.GetParameterInfo(String parameterName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.IndexForInputParameterNameString">
            <summary>Sets the shim of ParameterCollection.IndexForInputParameterName(String paramName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.IndexOfObject">
            <summary>Sets the shim of ParameterCollection.IndexOf(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.InsertInt32Object">
            <summary>Sets the shim of ParameterCollection.Insert(Int32 index, Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.IsFixedSizeGet">
            <summary>Sets the shim of ParameterCollection.get_IsFixedSize()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.IsReadOnlyGet">
            <summary>Sets the shim of ParameterCollection.get_IsReadOnly()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.IsSynchronizedGet">
            <summary>Sets the shim of ParameterCollection.get_IsSynchronized()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.ItemGetInt32">
            <summary>Sets the shim of ParameterCollection.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.ItemGetString">
            <summary>Sets the shim of ParameterCollection.get_Item(String parameterName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.ItemSetInt32Object">
            <summary>Sets the shim of ParameterCollection.set_Item(Int32 index, Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.ItemSetStringObject">
            <summary>Sets the shim of ParameterCollection.set_Item(String parameterName, Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.ParameterNameInt32">
            <summary>Sets the shim of ParameterCollection.ParameterName(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.RemoveAtInt32">
            <summary>Sets the shim of ParameterCollection.RemoveAt(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.RemoveObject">
            <summary>Sets the shim of ParameterCollection.Remove(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.SyncRootGet">
            <summary>Sets the shim of ParameterCollection.get_SyncRoot()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.AddObject">
            <summary>Sets the shim of ParameterCollection.Add(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.Clear">
            <summary>Sets the shim of ParameterCollection.Clear()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.ContainsObject">
            <summary>Sets the shim of ParameterCollection.Contains(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.CopyToArrayInt32">
            <summary>Sets the shim of ParameterCollection.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.CountGet">
            <summary>Sets the shim of ParameterCollection.get_Count()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.GetEnumerator">
            <summary>Sets the shim of ParameterCollection.GetEnumerator()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.GetParameterInfoInt32">
            <summary>Sets the shim of ParameterCollection.GetParameterInfo(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.GetParameterInfoString">
            <summary>Sets the shim of ParameterCollection.GetParameterInfo(String parameterName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.IndexForInputParameterNameString">
            <summary>Sets the shim of ParameterCollection.IndexForInputParameterName(String paramName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.IndexOfObject">
            <summary>Sets the shim of ParameterCollection.IndexOf(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.InsertInt32Object">
            <summary>Sets the shim of ParameterCollection.Insert(Int32 index, Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.IsFixedSizeGet">
            <summary>Sets the shim of ParameterCollection.get_IsFixedSize()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.IsReadOnlyGet">
            <summary>Sets the shim of ParameterCollection.get_IsReadOnly()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.IsSynchronizedGet">
            <summary>Sets the shim of ParameterCollection.get_IsSynchronized()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.ItemGetInt32">
            <summary>Sets the shim of ParameterCollection.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.ItemGetString">
            <summary>Sets the shim of ParameterCollection.get_Item(String parameterName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.ItemSetInt32Object">
            <summary>Sets the shim of ParameterCollection.set_Item(Int32 index, Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.ItemSetStringObject">
            <summary>Sets the shim of ParameterCollection.set_Item(String parameterName, Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.ParameterNameInt32">
            <summary>Sets the shim of ParameterCollection.ParameterName(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.RemoveAtInt32">
            <summary>Sets the shim of ParameterCollection.RemoveAt(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.RemoveObject">
            <summary>Sets the shim of ParameterCollection.Remove(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterCollection.AllInstances.SyncRootGet">
            <summary>Sets the shim of ParameterCollection.get_SyncRoot()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.Constructor">
            <summary>Sets the shim of ParameterTypeMatchingInfo.ParameterTypeMatchingInfo()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.ConstructorParameterKind">
            <summary>Sets the shim of ParameterTypeMatchingInfo.ParameterTypeMatchingInfo(ParameterKind kind)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.ConstructorStringBooleanParameterKind">
            <summary>Sets the shim of ParameterTypeMatchingInfo.ParameterTypeMatchingInfo(String nameToMatch, Boolean ignoreCase, ParameterKind kind)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.ConstructorStringParameterKind">
            <summary>Sets the shim of ParameterTypeMatchingInfo.ParameterTypeMatchingInfo(String nameToMatch, ParameterKind kind)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.KindGet">
            <summary>Sets the shim of ParameterTypeMatchingInfo.get_Kind()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.KindSetParameterKind">
            <summary>Sets the shim of ParameterTypeMatchingInfo.set_Kind(ParameterKind value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.AllInstances.KindGet">
            <summary>Sets the shim of ParameterTypeMatchingInfo.get_Kind()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingInfo.AllInstances.KindSetParameterKind">
            <summary>Sets the shim of ParameterTypeMatchingInfo.set_Kind(ParameterKind value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.ConstructorIEnumerableOfParameterTypeMatchingInfo">
            <summary>Sets the shim of ParameterTypeMatchingRule.ParameterTypeMatchingRule(IEnumerable`1&lt;ParameterTypeMatchingInfo&gt; matches)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of ParameterTypeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.ParameterMatchesGet">
            <summary>Sets the shim of ParameterTypeMatchingRule.get_ParameterMatches()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of ParameterTypeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimParameterTypeMatchingRule.AllInstances.ParameterMatchesGet">
            <summary>Sets the shim of ParameterTypeMatchingRule.get_ParameterMatches()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.PipelineManager</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.#ctor(Microsoft.Practices.Unity.InterceptionExtension.PipelineManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.Constructor">
            <summary>Sets the shim of PipelineManager.PipelineManager()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.CreatePipelineMethodInfoIEnumerableOfICallHandler">
            <summary>Sets the shim of PipelineManager.CreatePipeline(MethodInfo method, IEnumerable`1&lt;ICallHandler&gt; handlers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.GetPipelineMethodBase">
            <summary>Sets the shim of PipelineManager.GetPipeline(MethodBase method)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.InitializePipelineMethodImplementationInfoIEnumerableOfICallHandler">
            <summary>Sets the shim of PipelineManager.InitializePipeline(MethodImplementationInfo method, IEnumerable`1&lt;ICallHandler&gt; handlers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.SetPipelineMethodBaseHandlerPipeline">
            <summary>Sets the shim of PipelineManager.SetPipeline(MethodBase method, HandlerPipeline pipeline)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.StaticConstructor">
            <summary>Sets the shim of PipelineManager.PipelineManager()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.AllInstances.CreatePipelineMethodInfoIEnumerableOfICallHandler">
            <summary>Sets the shim of PipelineManager.CreatePipeline(MethodInfo method, IEnumerable`1&lt;ICallHandler&gt; handlers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.AllInstances.GetPipelineMethodBase">
            <summary>Sets the shim of PipelineManager.GetPipeline(MethodBase method)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.AllInstances.InitializePipelineMethodImplementationInfoIEnumerableOfICallHandler">
            <summary>Sets the shim of PipelineManager.InitializePipeline(MethodImplementationInfo method, IEnumerable`1&lt;ICallHandler&gt; handlers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPipelineManager.AllInstances.SetPipelineMethodBaseHandlerPipeline">
            <summary>Sets the shim of PipelineManager.SetPipeline(MethodBase method, HandlerPipeline pipeline)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.#ctor(Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerOf1InjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerOf1LifetimeManagerInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerOf1StringInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(String name, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerOf1StringLifetimeManagerInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(String name, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleOf1InjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleOf1LifetimeManagerInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleOf1StringInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(String name, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleOf1StringLifetimeManagerInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(String name, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerICallHandler">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(ICallHandler instance)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerString">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerTypeInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(Type type, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerTypeLifetimeManagerInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(Type type, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerTypeStringInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(Type type, String name, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddCallHandlerTypeStringLifetimeManagerInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(Type type, String name, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleIMatchingRule">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(IMatchingRule instance)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleString">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleTypeInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(Type type, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleTypeLifetimeManagerInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(Type type, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleTypeStringInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(Type type, String name, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AddMatchingRuleTypeStringLifetimeManagerInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(Type type, String name, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.ConstructorStringInterception">
            <summary>Sets the shim of PolicyDefinition.PolicyDefinition(String policyName, Interception extension)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.ContainerGet">
            <summary>Sets the shim of PolicyDefinition.get_Container()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.InterceptionGet">
            <summary>Sets the shim of PolicyDefinition.get_Interception()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.NewName">
            <summary>Sets the shim of PolicyDefinition.NewName()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.UpdateHandlerNamesString">
            <summary>Sets the shim of PolicyDefinition.UpdateHandlerNames(String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.UpdateRuleDrivenPolicyInjection">
            <summary>Sets the shim of PolicyDefinition.UpdateRuleDrivenPolicyInjection()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.UpdateRulesParametersString">
            <summary>Sets the shim of PolicyDefinition.UpdateRulesParameters(String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerOf1InjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerOf1LifetimeManagerInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerOf1StringInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition,System.String,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(String name, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerOf1StringLifetimeManagerInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(String name, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleOf1InjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleOf1LifetimeManagerInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleOf1StringInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition,System.String,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(String name, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleOf1StringLifetimeManagerInjectionMemberArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[],Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition})">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(String name, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerICallHandler">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(ICallHandler instance)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerString">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerTypeInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(Type type, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerTypeLifetimeManagerInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(Type type, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerTypeStringInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(Type type, String name, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddCallHandlerTypeStringLifetimeManagerInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddCallHandler(Type type, String name, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleIMatchingRule">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(IMatchingRule instance)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleString">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleTypeInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(Type type, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleTypeLifetimeManagerInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(Type type, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleTypeStringInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(Type type, String name, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.AddMatchingRuleTypeStringLifetimeManagerInjectionMemberArray">
            <summary>Sets the shim of PolicyDefinition.AddMatchingRule(Type type, String name, LifetimeManager lifetimeManager, InjectionMember[] injectionMembers)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.ContainerGet">
            <summary>Sets the shim of PolicyDefinition.get_Container()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.InterceptionGet">
            <summary>Sets the shim of PolicyDefinition.get_Interception()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.UpdateHandlerNamesString">
            <summary>Sets the shim of PolicyDefinition.UpdateHandlerNames(String name)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.UpdateRuleDrivenPolicyInjection">
            <summary>Sets the shim of PolicyDefinition.UpdateRuleDrivenPolicyInjection()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyDefinition.AllInstances.UpdateRulesParametersString">
            <summary>Sets the shim of PolicyDefinition.UpdateRulesParameters(String name)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.ConstructorCurrentInterceptionRequestInjectionPolicyArrayIUnityContainer">
            <summary>Sets the shim of PolicyInjectionBehavior.PolicyInjectionBehavior(CurrentInterceptionRequest interceptionRequest, InjectionPolicy[] policies, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.ConstructorPipelineManager">
            <summary>Sets the shim of PolicyInjectionBehavior.PolicyInjectionBehavior(PipelineManager pipelineManager)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.GetPipelineMethodBase">
            <summary>Sets the shim of PolicyInjectionBehavior.GetPipeline(MethodBase method)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.GetRequiredInterfaces">
            <summary>Sets the shim of PolicyInjectionBehavior.GetRequiredInterfaces()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.InvokeIMethodInvocationGetNextInterceptionBehaviorDelegate">
            <summary>Sets the shim of PolicyInjectionBehavior.Invoke(IMethodInvocation input, GetNextInterceptionBehaviorDelegate getNext)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.WillExecuteGet">
            <summary>Sets the shim of PolicyInjectionBehavior.get_WillExecute()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.AllInstances.GetPipelineMethodBase">
            <summary>Sets the shim of PolicyInjectionBehavior.GetPipeline(MethodBase method)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.AllInstances.GetRequiredInterfaces">
            <summary>Sets the shim of PolicyInjectionBehavior.GetRequiredInterfaces()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.AllInstances.InvokeIMethodInvocationGetNextInterceptionBehaviorDelegate">
            <summary>Sets the shim of PolicyInjectionBehavior.Invoke(IMethodInvocation input, GetNextInterceptionBehaviorDelegate getNext)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicyInjectionBehavior.AllInstances.WillExecuteGet">
            <summary>Sets the shim of PolicyInjectionBehavior.get_WillExecute()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.PolicySet</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.#ctor(Microsoft.Practices.Unity.InterceptionExtension.PolicySet)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.Bind(System.Collections.IList)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.Bind(System.Collections.Generic.ICollection{Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.Bind(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.Bind(System.Collections.Generic.IList{Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.Bind(System.Collections.Generic.IReadOnlyCollection{Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.Bind(System.Collections.Generic.IReadOnlyList{Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.CalculateHandlersForIEnumerableOfInjectionPolicyMethodImplementationInfoIUnityContainer">
            <summary>Sets the shim of PolicySet.CalculateHandlersFor(IEnumerable`1&lt;InjectionPolicy&gt; policies, MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.ConstructorInjectionPolicyArray">
            <summary>Sets the shim of PolicySet.PolicySet(InjectionPolicy[] policies)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.GetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the shim of PolicySet.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.GetPoliciesForMethodImplementationInfo">
            <summary>Sets the shim of PolicySet.GetPoliciesFor(MethodImplementationInfo member)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.GetPoliciesNotForMethodImplementationInfo">
            <summary>Sets the shim of PolicySet.GetPoliciesNotFor(MethodImplementationInfo member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.AllInstances.GetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the shim of PolicySet.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.AllInstances.GetPoliciesForMethodImplementationInfo">
            <summary>Sets the shim of PolicySet.GetPoliciesFor(MethodImplementationInfo member)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPolicySet.AllInstances.GetPoliciesNotForMethodImplementationInfo">
            <summary>Sets the shim of PolicySet.GetPoliciesNotFor(MethodImplementationInfo member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.#ctor(Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.ConstructorString">
            <summary>Sets the shim of PropertyMatchingInfo.PropertyMatchingInfo(String match)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.ConstructorStringPropertyMatchingOption">
            <summary>Sets the shim of PropertyMatchingInfo.PropertyMatchingInfo(String match, PropertyMatchingOption option)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.ConstructorStringPropertyMatchingOptionBoolean">
            <summary>Sets the shim of PropertyMatchingInfo.PropertyMatchingInfo(String match, PropertyMatchingOption option, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.OptionGet">
            <summary>Sets the shim of PropertyMatchingInfo.get_Option()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.OptionSetPropertyMatchingOption">
            <summary>Sets the shim of PropertyMatchingInfo.set_Option(PropertyMatchingOption value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.AllInstances.OptionGet">
            <summary>Sets the shim of PropertyMatchingInfo.get_Option()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingInfo.AllInstances.OptionSetPropertyMatchingOption">
            <summary>Sets the shim of PropertyMatchingInfo.set_Option(PropertyMatchingOption value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.ConstructorIEnumerableOfPropertyMatchingInfo">
            <summary>Sets the shim of PropertyMatchingRule.PropertyMatchingRule(IEnumerable`1&lt;PropertyMatchingInfo&gt; matches)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.ConstructorString">
            <summary>Sets the shim of PropertyMatchingRule.PropertyMatchingRule(String propertyName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.ConstructorStringPropertyMatchingOption">
            <summary>Sets the shim of PropertyMatchingRule.PropertyMatchingRule(String propertyName, PropertyMatchingOption option)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.ConstructorStringPropertyMatchingOptionBoolean">
            <summary>Sets the shim of PropertyMatchingRule.PropertyMatchingRule(String propertyName, PropertyMatchingOption option, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of PropertyMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimPropertyMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of PropertyMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper.GetAllAttributesOf1MemberInfoBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Reflection.MemberInfo,System.Boolean,``0[]})">
            <summary>Sets the shim of ReflectionHelper.GetAllAttributes(MemberInfo member, Boolean inherits)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper.GetAttributesOf1MemberInfoBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Reflection.MemberInfo,System.Boolean,``0[]})">
            <summary>Sets the shim of ReflectionHelper.GetAttributes(MemberInfo member, Boolean inherits)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper.GetPropertyFromMethodMethodBase">
            <summary>Sets the shim of ReflectionHelper.GetPropertyFromMethod(MethodBase method)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper.GetPropertyFromMethodMethodInfo">
            <summary>Sets the shim of ReflectionHelper.GetPropertyFromMethod(MethodInfo method)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper.GetPropertyTypesMethodInfoBooleanTypeOutTypeArrayOut">
            <summary>Sets the shim of ReflectionHelper.GetPropertyTypes(MethodInfo method, Boolean isGetter, Type&amp; propertyType, Type[]&amp; indexerTypes)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper._GetPropertyTypesb__0ParameterInfo">
            <summary>Sets the shim of ReflectionHelper.&lt;GetPropertyTypes&gt;b__0(ParameterInfo pi)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReflectionHelper._GetPropertyTypesb__1ParameterInfo">
            <summary>Sets the shim of ReflectionHelper.&lt;GetPropertyTypes&gt;b__1(ParameterInfo pi)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.Bind(Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.ConstructorNamedTypeBuildKey">
            <summary>Sets the shim of ResolvedInstanceInterceptionPolicy.ResolvedInstanceInterceptionPolicy(NamedTypeBuildKey buildKey)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.GetInterceptorIBuilderContext">
            <summary>Sets the shim of ResolvedInstanceInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedInstanceInterceptionPolicy.AllInstances.GetInterceptorIBuilderContext">
            <summary>Sets the shim of ResolvedInstanceInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.Bind(Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.Bind(Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.ConstructorNamedTypeBuildKey">
            <summary>Sets the shim of ResolvedTypeInterceptionPolicy.ResolvedTypeInterceptionPolicy(NamedTypeBuildKey buildKey)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.GetInterceptorIBuilderContext">
            <summary>Sets the shim of ResolvedTypeInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.ProxyTypeGet">
            <summary>Sets the shim of ResolvedTypeInterceptionPolicy.get_ProxyType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.ProxyTypeSetType">
            <summary>Sets the shim of ResolvedTypeInterceptionPolicy.set_ProxyType(Type value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.AllInstances.GetInterceptorIBuilderContext">
            <summary>Sets the shim of ResolvedTypeInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.AllInstances.ProxyTypeGet">
            <summary>Sets the shim of ResolvedTypeInterceptionPolicy.get_ProxyType()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimResolvedTypeInterceptionPolicy.AllInstances.ProxyTypeSetType">
            <summary>Sets the shim of ResolvedTypeInterceptionPolicy.set_ProxyType(Type value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.ConstructorString">
            <summary>Sets the shim of ReturnTypeMatchingRule.ReturnTypeMatchingRule(String returnTypeName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.ConstructorStringBoolean">
            <summary>Sets the shim of ReturnTypeMatchingRule.ReturnTypeMatchingRule(String returnTypeName, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.ConstructorType">
            <summary>Sets the shim of ReturnTypeMatchingRule.ReturnTypeMatchingRule(Type returnType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of ReturnTypeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimReturnTypeMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of ReturnTypeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.ConstructorIMatchingRuleArrayStringArray">
            <summary>Sets the shim of RuleDrivenPolicy.RuleDrivenPolicy(IMatchingRule[] matchingRules, String[] callHandlerNames)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.ConstructorStringIMatchingRuleArrayStringArray">
            <summary>Sets the shim of RuleDrivenPolicy.RuleDrivenPolicy(String name, IMatchingRule[] matchingRules, String[] callHandlerNames)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.DoGetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the shim of RuleDrivenPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.DoesMatchMethodImplementationInfo">
            <summary>Sets the shim of RuleDrivenPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.AllInstances.DoGetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the shim of RuleDrivenPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimRuleDrivenPolicy.AllInstances.DoesMatchMethodImplementationInfo">
            <summary>Sets the shim of RuleDrivenPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.TagAttribute</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute.#ctor(Microsoft.Practices.Unity.InterceptionExtension.TagAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute.ConstructorString">
            <summary>Sets the shim of TagAttribute.TagAttribute(String tag)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute.TagGet">
            <summary>Sets the shim of TagAttribute.get_Tag()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttribute.AllInstances.TagGet">
            <summary>Sets the shim of TagAttribute.get_Tag()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.ConstructorString">
            <summary>Sets the shim of TagAttributeMatchingRule.TagAttributeMatchingRule(String tagToMatch)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.ConstructorStringBoolean">
            <summary>Sets the shim of TagAttributeMatchingRule.TagAttributeMatchingRule(String tagToMatch, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of TagAttributeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTagAttributeMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of TagAttributeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.#ctor(Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.CanInterceptType">
            <summary>Sets the shim of TransparentProxyInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.Constructor">
            <summary>Sets the shim of TransparentProxyInterceptor.TransparentProxyInterceptor()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.CreateProxyTypeObjectTypeArray">
            <summary>Sets the shim of TransparentProxyInterceptor.CreateProxy(Type t, Object target, Type[] additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.GetImplementedInterfaceMethodsType">
            <summary>Sets the shim of TransparentProxyInterceptor.GetImplementedInterfaceMethods(Type t)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.GetInterceptableMethodsTypeType">
            <summary>Sets the shim of TransparentProxyInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.GetMBROMethodsType">
            <summary>Sets the shim of TransparentProxyInterceptor.GetMBROMethods(Type t)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.IsNotSystemMethodMethodInfo">
            <summary>Sets the shim of TransparentProxyInterceptor.IsNotSystemMethod(MethodInfo method)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.AllInstances.CanInterceptType">
            <summary>Sets the shim of TransparentProxyInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.AllInstances.CreateProxyTypeObjectTypeArray">
            <summary>Sets the shim of TransparentProxyInterceptor.CreateProxy(Type t, Object target, Type[] additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyInterceptor.AllInstances.GetInterceptableMethodsTypeType">
            <summary>Sets the shim of TransparentProxyInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.#ctor(Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.ArgumentsGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_Arguments()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.ArgumentsMicrosoftPracticesUnityInterceptionExtensionIMethodInvocationget">
            <summary>Sets the shim of TransparentProxyMethodInvocation.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.get_Arguments()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.ConstructorIMethodCallMessageObject">
            <summary>Sets the shim of TransparentProxyMethodInvocation.TransparentProxyMethodInvocation(IMethodCallMessage callMessage, Object target)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.CreateExceptionMethodReturnException">
            <summary>Sets the shim of TransparentProxyMethodInvocation.CreateExceptionMethodReturn(Exception ex)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.CreateMethodReturnObjectObjectArray">
            <summary>Sets the shim of TransparentProxyMethodInvocation.CreateMethodReturn(Object returnValue, Object[] outputs)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.InputsGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_Inputs()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.InvocationContextGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_InvocationContext()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.MethodBaseGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_MethodBase()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.TargetGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_Target()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation._ctorb__0ParameterInfo">
            <summary>Sets the shim of TransparentProxyMethodInvocation.&lt;.ctor&gt;b__0(ParameterInfo info)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.AllInstances.ArgumentsGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_Arguments()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.AllInstances.ArgumentsMicrosoftPracticesUnityInterceptionExtensionIMethodInvocationget">
            <summary>Sets the shim of TransparentProxyMethodInvocation.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.get_Arguments()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.AllInstances.CreateExceptionMethodReturnException">
            <summary>Sets the shim of TransparentProxyMethodInvocation.CreateExceptionMethodReturn(Exception ex)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.AllInstances.CreateMethodReturnObjectObjectArray">
            <summary>Sets the shim of TransparentProxyMethodInvocation.CreateMethodReturn(Object returnValue, Object[] outputs)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.AllInstances.InputsGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_Inputs()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.AllInstances.InvocationContextGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_InvocationContext()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.AllInstances.MethodBaseGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_MethodBase()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTransparentProxyMethodInvocation.AllInstances.TargetGet">
            <summary>Sets the shim of TransparentProxyMethodInvocation.get_Target()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.TypeInterceptionStrategy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.TypeInterceptionStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.Bind(Microsoft.Practices.ObjectBuilder2.IBuilderStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.FindInterceptionPolicyOf1IBuilderContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Microsoft.Practices.ObjectBuilder2.IBuilderContext,``0})">
            <summary>Sets the shim of TypeInterceptionStrategy.FindInterceptionPolicy(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.Constructor">
            <summary>Sets the shim of TypeInterceptionStrategy.TypeInterceptionStrategy()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.PostBuildUpIBuilderContext">
            <summary>Sets the shim of TypeInterceptionStrategy.PostBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.PreBuildUpIBuilderContext">
            <summary>Sets the shim of TypeInterceptionStrategy.PreBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy._PreBuildUpb__1IInterceptionBehavior">
            <summary>Sets the shim of TypeInterceptionStrategy.&lt;PreBuildUp&gt;b__1(IInterceptionBehavior ib)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.AllInstances.PostBuildUpIBuilderContext">
            <summary>Sets the shim of TypeInterceptionStrategy.PostBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeInterceptionStrategy.AllInstances.PreBuildUpIBuilderContext">
            <summary>Sets the shim of TypeInterceptionStrategy.PreBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.#ctor(Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.ComparisonBoolean">
            <summary>Sets the shim of TypeMatchingRule.Comparison(Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.ConstructorIEnumerableOfMatchingInfo">
            <summary>Sets the shim of TypeMatchingRule.TypeMatchingRule(IEnumerable`1&lt;MatchingInfo&gt; matches)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.ConstructorString">
            <summary>Sets the shim of TypeMatchingRule.TypeMatchingRule(String typeName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.ConstructorStringBoolean">
            <summary>Sets the shim of TypeMatchingRule.TypeMatchingRule(String typeName, Boolean ignoreCase)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.ConstructorType">
            <summary>Sets the shim of TypeMatchingRule.TypeMatchingRule(Type type)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.MatchesMethodBase">
            <summary>Sets the shim of TypeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.MatchesType">
            <summary>Sets the shim of TypeMatchingRule.Matches(Type t)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.SafeGetTypeNameType">
            <summary>Sets the shim of TypeMatchingRule.SafeGetTypeName(Type type)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule._ctorb__0MatchingInfo">
            <summary>Sets the shim of TypeMatchingRule.&lt;.ctor&gt;b__0(MatchingInfo match)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.AllInstances.MatchesMethodBase">
            <summary>Sets the shim of TypeMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimTypeMatchingRule.AllInstances.MatchesType">
            <summary>Sets the shim of TypeMatchingRule.Matches(Type t)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.#ctor(Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.Bind(Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.Bind(Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.CanInterceptType">
            <summary>Sets the shim of VirtualMethodInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.Constructor">
            <summary>Sets the shim of VirtualMethodInterceptor.VirtualMethodInterceptor()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.CreateProxyTypeTypeTypeArray">
            <summary>Sets the shim of VirtualMethodInterceptor.CreateProxyType(Type t, Type[] additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.DoGetInterceptableMethodsTypeType">
            <summary>Sets the shim of VirtualMethodInterceptor.DoGetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.GetInterceptableMethodsTypeType">
            <summary>Sets the shim of VirtualMethodInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.StaticConstructor">
            <summary>Sets the shim of VirtualMethodInterceptor.VirtualMethodInterceptor()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.AllInstances.CanInterceptType">
            <summary>Sets the shim of VirtualMethodInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.AllInstances.CreateProxyTypeTypeTypeArray">
            <summary>Sets the shim of VirtualMethodInterceptor.CreateProxyType(Type t, Type[] additionalInterfaces)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.AllInstances.DoGetInterceptableMethodsTypeType">
            <summary>Sets the shim of VirtualMethodInterceptor.DoGetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInterceptor.AllInstances.GetInterceptableMethodsTypeType">
            <summary>Sets the shim of VirtualMethodInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.#ctor(Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.ArgumentsGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_Arguments()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.ConstructorObjectMethodBaseObjectArray">
            <summary>Sets the shim of VirtualMethodInvocation.VirtualMethodInvocation(Object target, MethodBase targetMethod, Object[] parameterValues)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.CreateExceptionMethodReturnException">
            <summary>Sets the shim of VirtualMethodInvocation.CreateExceptionMethodReturn(Exception ex)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.CreateMethodReturnObjectObjectArray">
            <summary>Sets the shim of VirtualMethodInvocation.CreateMethodReturn(Object returnValue, Object[] outputs)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.InputsGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_Inputs()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.InvocationContextGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_InvocationContext()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.MethodBaseGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_MethodBase()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.TargetGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_Target()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation._ctorb__0ParameterInfo">
            <summary>Sets the shim of VirtualMethodInvocation.&lt;.ctor&gt;b__0(ParameterInfo param)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation._ctorb__1ParameterInfo">
            <summary>Sets the shim of VirtualMethodInvocation.&lt;.ctor&gt;b__1(ParameterInfo param)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.AllInstances.ArgumentsGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_Arguments()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.AllInstances.CreateExceptionMethodReturnException">
            <summary>Sets the shim of VirtualMethodInvocation.CreateExceptionMethodReturn(Exception ex)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.AllInstances.CreateMethodReturnObjectObjectArray">
            <summary>Sets the shim of VirtualMethodInvocation.CreateMethodReturn(Object returnValue, Object[] outputs)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.AllInstances.InputsGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_Inputs()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.AllInstances.InvocationContextGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_InvocationContext()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.AllInstances.MethodBaseGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_MethodBase()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodInvocation.AllInstances.TargetGet">
            <summary>Sets the shim of VirtualMethodInvocation.get_Target()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn">
            <summary>Shim type of Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.#ctor(Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.Bind(Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.ConstructorIMethodInvocationException">
            <summary>Sets the shim of VirtualMethodReturn.VirtualMethodReturn(IMethodInvocation originalInvocation, Exception exception)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.ConstructorIMethodInvocationObjectObjectArray">
            <summary>Sets the shim of VirtualMethodReturn.VirtualMethodReturn(IMethodInvocation originalInvocation, Object returnValue, Object[] arguments)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.ExceptionGet">
            <summary>Sets the shim of VirtualMethodReturn.get_Exception()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.ExceptionSetException">
            <summary>Sets the shim of VirtualMethodReturn.set_Exception(Exception value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.InvocationContextGet">
            <summary>Sets the shim of VirtualMethodReturn.get_InvocationContext()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.OutputsGet">
            <summary>Sets the shim of VirtualMethodReturn.get_Outputs()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.ReturnValueGet">
            <summary>Sets the shim of VirtualMethodReturn.get_ReturnValue()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.ReturnValueSetObject">
            <summary>Sets the shim of VirtualMethodReturn.set_ReturnValue(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn._ctorb__0ParameterInfo">
            <summary>Sets the shim of VirtualMethodReturn.&lt;.ctor&gt;b__0(ParameterInfo pi)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn._ctorb__2ParameterInfo">
            <summary>Sets the shim of VirtualMethodReturn.&lt;.ctor&gt;b__2(ParameterInfo )</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.AllInstances.ExceptionGet">
            <summary>Sets the shim of VirtualMethodReturn.get_Exception()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.AllInstances.ExceptionSetException">
            <summary>Sets the shim of VirtualMethodReturn.set_Exception(Exception value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.AllInstances.InvocationContextGet">
            <summary>Sets the shim of VirtualMethodReturn.get_InvocationContext()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.AllInstances.OutputsGet">
            <summary>Sets the shim of VirtualMethodReturn.get_Outputs()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.AllInstances.ReturnValueGet">
            <summary>Sets the shim of VirtualMethodReturn.get_ReturnValue()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.ShimVirtualMethodReturn.AllInstances.ReturnValueSetObject">
            <summary>Sets the shim of VirtualMethodReturn.set_ReturnValue(Object value)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of AdditionalInterface.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of AdditionalInterface.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface.InitializeStub">
            <summary>Initializes a new instance of type StubAdditionalInterface</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface`1">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface`1.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of AdditionalInterface.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface`1.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of AdditionalInterface.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface`1.InitializeStub">
            <summary>Initializes a new instance of type StubAdditionalInterface</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterface`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterfacesPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterfacesPolicy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterfacesPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubAdditionalInterfacesPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterfacesPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterfacesPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAdditionalInterfacesPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAssemblyMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAssemblyMatchingRule.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAssemblyMatchingRule.#ctor(System.Reflection.Assembly)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAssemblyMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubAssemblyMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAssemblyMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAssemblyMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAssemblyMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.DoGetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>Sets the stub of AttributeDrivenPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.DoGetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the stub of AttributeDrivenPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.DoesMatch(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>Sets the stub of AttributeDrivenPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.DoesMatchMethodImplementationInfo">
            <summary>Sets the stub of AttributeDrivenPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.GetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>Sets the stub of InjectionPolicy.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.GetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the stub of InjectionPolicy.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubAttributeDrivenPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicyMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicyMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicyMatchingRule.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicyMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubAttributeDrivenPolicyMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicyMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicyMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubAttributeDrivenPolicyMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubConstructorWithResolverKeysSelectorPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubConstructorWithResolverKeysSelectorPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.SelectedConstructor)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubConstructorWithResolverKeysSelectorPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubConstructorWithResolverKeysSelectorPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubConstructorWithResolverKeysSelectorPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubConstructorWithResolverKeysSelectorPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubConstructorWithResolverKeysSelectorPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCurrentInterceptionRequest">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCurrentInterceptionRequest.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptor,System.Type,System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCurrentInterceptionRequest.InitializeStub">
            <summary>Initializes a new instance of type StubCurrentInterceptionRequest</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCurrentInterceptionRequest.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCurrentInterceptionRequest.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCurrentInterceptionRequest.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCustomAttributeMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCustomAttributeMatchingRule.#ctor(System.Type,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCustomAttributeMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubCustomAttributeMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCustomAttributeMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCustomAttributeMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubCustomAttributeMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.GetBehaviorsPolicy(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>Sets the stub of DefaultInterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.GetBehaviorsPolicyIPolicyListTypeString">
            <summary>Sets the stub of DefaultInterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultInterceptionBehavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.GetBehaviorsPolicy(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>Sets the stub of DefaultInterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.GetBehaviorsPolicyIPolicyListTypeString">
            <summary>Sets the stub of DefaultInterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultInterceptionBehavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptionBehavior`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of DefaultInterceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of DefaultInterceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultInterceptor</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor`1">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor`1.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor`1.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of DefaultInterceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor`1.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of DefaultInterceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor`1.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultInterceptor</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubDefaultInterceptor`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedInstanceInterceptionPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedInstanceInterceptionPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedInstanceInterceptionPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubFixedInstanceInterceptionPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedInstanceInterceptionPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedInstanceInterceptionPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedInstanceInterceptionPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedTypeInterceptionPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedTypeInterceptionPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedTypeInterceptionPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubFixedTypeInterceptionPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedTypeInterceptionPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedTypeInterceptionPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubFixedTypeInterceptionPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubGlob">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.Glob</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubGlob.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubGlob.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubGlob.InitializeStub">
            <summary>Initializes a new instance of type StubGlob</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubGlob.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubGlob.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubGlob.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.CreateHandler(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>Sets the stub of HandlerAttribute.CreateHandler(IUnityContainer container)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.CreateHandlerIUnityContainer">
            <summary>Sets the stub of HandlerAttribute.CreateHandler(IUnityContainer container)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubHandlerAttribute</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerPipeline">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerPipeline.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerPipeline.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.ICallHandler})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerPipeline.InitializeStub">
            <summary>Initializes a new instance of type StubHandlerPipeline</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerPipeline.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerPipeline.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubHandlerPipeline.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIAdditionalInterfacesPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IAdditionalInterfacesPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIAdditionalInterfacesPolicy.#ctor">
            <summary>Initializes a new instance of type StubIAdditionalInterfacesPolicy</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIAdditionalInterfacesPolicy.AdditionalInterfacesGet">
            <summary>Sets the stub of IAdditionalInterfacesPolicy.get_AdditionalInterfaces()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIAdditionalInterfacesPolicy.mpui::Microsoft#Practices#Unity#InterceptionExtension#IAdditionalInterfacesPolicy#AdditionalInterfaces">
            <summary>Sets the stub of IAdditionalInterfacesPolicy.get_AdditionalInterfaces()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubICallHandler">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ICallHandler</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubICallHandler.#ctor">
            <summary>Initializes a new instance of type StubICallHandler</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubICallHandler.AttachBackingFieldToOrder">
            <summary>Attaches delegates to emulate StubICallHandler.Order as a property with a backing field.</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubICallHandler.InvokeIMethodInvocationGetNextHandlerDelegate">
            <summary>Sets the stub of ICallHandler.Invoke(IMethodInvocation input, GetNextHandlerDelegate getNext)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubICallHandler.mpui::Microsoft#Practices#Unity#InterceptionExtension#ICallHandler#Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>Sets the stub of ICallHandler.Invoke(IMethodInvocation input, GetNextHandlerDelegate getNext)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubICallHandler.OrderGet">
            <summary>Sets the stub of ICallHandler.get_Order()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubICallHandler.OrderSetInt32">
            <summary>Sets the stub of ICallHandler.set_Order(Int32 value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubICallHandler.mpui::Microsoft#Practices#Unity#InterceptionExtension#ICallHandler#Order">
            <summary>Sets the stub of ICallHandler.get_Order()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptionPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptionPolicy.#ctor">
            <summary>Initializes a new instance of type StubIInstanceInterceptionPolicy</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptionPolicy.GetInterceptorIBuilderContext">
            <summary>Sets the stub of IInstanceInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptionPolicy.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInstanceInterceptionPolicy#GetInterceptor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of IInstanceInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptor">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptor.#ctor">
            <summary>Initializes a new instance of type StubIInstanceInterceptor</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptor.CanInterceptType">
            <summary>Sets the stub of IInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptor.CreateProxyTypeObjectTypeArray">
            <summary>Sets the stub of IInstanceInterceptor.CreateProxy(Type t, Object target, Type[] additionalInterfaces)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptor.GetInterceptableMethodsTypeType">
            <summary>Sets the stub of IInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptor.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInstanceInterceptor#CreateProxy(System.Type,System.Object,System.Type[])">
            <summary>Sets the stub of IInstanceInterceptor.CreateProxy(Type t, Object target, Type[] additionalInterfaces)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptor.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptor#CanIntercept(System.Type)">
            <summary>Sets the stub of IInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInstanceInterceptor.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptor#GetInterceptableMethods(System.Type,System.Type)">
            <summary>Sets the stub of IInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptingProxy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptingProxy.#ctor">
            <summary>Initializes a new instance of type StubIInterceptingProxy</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptingProxy.AddInterceptionBehaviorIInterceptionBehavior">
            <summary>Sets the stub of IInterceptingProxy.AddInterceptionBehavior(IInterceptionBehavior interceptor)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptingProxy.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptingProxy#AddInterceptionBehavior(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>Sets the stub of IInterceptingProxy.AddInterceptionBehavior(IInterceptionBehavior interceptor)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehavior">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehavior.#ctor">
            <summary>Initializes a new instance of type StubIInterceptionBehavior</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehavior.GetRequiredInterfaces">
            <summary>Sets the stub of IInterceptionBehavior.GetRequiredInterfaces()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehavior.InvokeIMethodInvocationGetNextInterceptionBehaviorDelegate">
            <summary>Sets the stub of IInterceptionBehavior.Invoke(IMethodInvocation input, GetNextInterceptionBehaviorDelegate getNext)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehavior.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptionBehavior#GetRequiredInterfaces">
            <summary>Sets the stub of IInterceptionBehavior.GetRequiredInterfaces()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehavior.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptionBehavior#Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate)">
            <summary>Sets the stub of IInterceptionBehavior.Invoke(IMethodInvocation input, GetNextInterceptionBehaviorDelegate getNext)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehavior.WillExecuteGet">
            <summary>Sets the stub of IInterceptionBehavior.get_WillExecute()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehavior.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptionBehavior#WillExecute">
            <summary>Sets the stub of IInterceptionBehavior.get_WillExecute()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehaviorsPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehaviorsPolicy.#ctor">
            <summary>Initializes a new instance of type StubIInterceptionBehaviorsPolicy</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehaviorsPolicy.BehaviorKeysGet">
            <summary>Sets the stub of IInterceptionBehaviorsPolicy.get_BehaviorKeys()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehaviorsPolicy.GetEffectiveBehaviorsIBuilderContextIInterceptorTypeType">
            <summary>Sets the stub of IInterceptionBehaviorsPolicy.GetEffectiveBehaviors(IBuilderContext context, IInterceptor interceptor, Type typeToIntercept, Type implementationType)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehaviorsPolicy.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptionBehaviorsPolicy#GetEffectiveBehaviors(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.Unity.InterceptionExtension.IInterceptor,System.Type,System.Type)">
            <summary>Sets the stub of IInterceptionBehaviorsPolicy.GetEffectiveBehaviors(IBuilderContext context, IInterceptor interceptor, Type typeToIntercept, Type implementationType)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptionBehaviorsPolicy.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptionBehaviorsPolicy#BehaviorKeys">
            <summary>Sets the stub of IInterceptionBehaviorsPolicy.get_BehaviorKeys()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptor">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptor.#ctor">
            <summary>Initializes a new instance of type StubIInterceptor</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptor.CanInterceptType">
            <summary>Sets the stub of IInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptor.GetInterceptableMethodsTypeType">
            <summary>Sets the stub of IInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptor.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptor#CanIntercept(System.Type)">
            <summary>Sets the stub of IInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIInterceptor.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptor#GetInterceptableMethods(System.Type,System.Type)">
            <summary>Sets the stub of IInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMatchingRule.#ctor">
            <summary>Initializes a new instance of type StubIMatchingRule</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMatchingRule.MatchesMethodBase">
            <summary>Sets the stub of IMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMatchingRule.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMatchingRule#Matches(System.Reflection.MethodBase)">
            <summary>Sets the stub of IMatchingRule.Matches(MethodBase member)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.#ctor">
            <summary>Initializes a new instance of type StubIMethodInvocation</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.ArgumentsGet">
            <summary>Sets the stub of IMethodInvocation.get_Arguments()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.CreateExceptionMethodReturnException">
            <summary>Sets the stub of IMethodInvocation.CreateExceptionMethodReturn(Exception ex)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.CreateMethodReturnObjectObjectArray">
            <summary>Sets the stub of IMethodInvocation.CreateMethodReturn(Object returnValue, Object[] outputs)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.InputsGet">
            <summary>Sets the stub of IMethodInvocation.get_Inputs()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.InvocationContextGet">
            <summary>Sets the stub of IMethodInvocation.get_InvocationContext()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.MethodBaseGet">
            <summary>Sets the stub of IMethodInvocation.get_MethodBase()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodInvocation#CreateExceptionMethodReturn(System.Exception)">
            <summary>Sets the stub of IMethodInvocation.CreateExceptionMethodReturn(Exception ex)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodInvocation#CreateMethodReturn(System.Object,System.Object[])">
            <summary>Sets the stub of IMethodInvocation.CreateMethodReturn(Object returnValue, Object[] outputs)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.TargetGet">
            <summary>Sets the stub of IMethodInvocation.get_Target()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodInvocation#Arguments">
            <summary>Sets the stub of IMethodInvocation.get_Arguments()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodInvocation#Inputs">
            <summary>Sets the stub of IMethodInvocation.get_Inputs()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodInvocation#InvocationContext">
            <summary>Sets the stub of IMethodInvocation.get_InvocationContext()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodInvocation#MethodBase">
            <summary>Sets the stub of IMethodInvocation.get_MethodBase()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodInvocation.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodInvocation#Target">
            <summary>Sets the stub of IMethodInvocation.get_Target()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.#ctor">
            <summary>Initializes a new instance of type StubIMethodReturn</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.AttachBackingFieldToException">
            <summary>Attaches delegates to emulate StubIMethodReturn.Exception as a property with a backing field.</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.AttachBackingFieldToReturnValue">
            <summary>Attaches delegates to emulate StubIMethodReturn.ReturnValue as a property with a backing field.</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.ExceptionGet">
            <summary>Sets the stub of IMethodReturn.get_Exception()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.ExceptionSetException">
            <summary>Sets the stub of IMethodReturn.set_Exception(Exception value)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.InvocationContextGet">
            <summary>Sets the stub of IMethodReturn.get_InvocationContext()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.OutputsGet">
            <summary>Sets the stub of IMethodReturn.get_Outputs()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.ReturnValueGet">
            <summary>Sets the stub of IMethodReturn.get_ReturnValue()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.ReturnValueSetObject">
            <summary>Sets the stub of IMethodReturn.set_ReturnValue(Object value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodReturn#Exception">
            <summary>Sets the stub of IMethodReturn.get_Exception()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodReturn#InvocationContext">
            <summary>Sets the stub of IMethodReturn.get_InvocationContext()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodReturn#Outputs">
            <summary>Sets the stub of IMethodReturn.get_Outputs()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIMethodReturn.mpui::Microsoft#Practices#Unity#InterceptionExtension#IMethodReturn#ReturnValue">
            <summary>Sets the stub of IMethodReturn.get_ReturnValue()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.#ctor">
            <summary>Initializes a new instance of type StubIParameterCollection</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.AddObject">
            <summary>Sets the stub of IList.Add(Object value)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.Clear">
            <summary>Sets the stub of IList.Clear()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.ContainsObject">
            <summary>Sets the stub of IList.Contains(Object value)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.CopyToArrayInt32">
            <summary>Sets the stub of ICollection.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.CountGet">
            <summary>Sets the stub of ICollection.get_Count()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.GetEnumerator">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.GetParameterInfoInt32">
            <summary>Sets the stub of IParameterCollection.GetParameterInfo(Int32 index)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.GetParameterInfoString">
            <summary>Sets the stub of IParameterCollection.GetParameterInfo(String parameterName)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.IndexOfObject">
            <summary>Sets the stub of IList.IndexOf(Object value)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.InsertInt32Object">
            <summary>Sets the stub of IList.Insert(Int32 index, Object value)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.IsFixedSizeGet">
            <summary>Sets the stub of IList.get_IsFixedSize()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.IsReadOnlyGet">
            <summary>Sets the stub of IList.get_IsReadOnly()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.IsSynchronizedGet">
            <summary>Sets the stub of ICollection.get_IsSynchronized()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.ItemGetInt32">
            <summary>Sets the stub of IList.get_Item(Int32 index)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.ItemGetString">
            <summary>Sets the stub of IParameterCollection.get_Item(String parameterName)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.ItemSetInt32Object">
            <summary>Sets the stub of IList.set_Item(Int32 index, Object value)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.ItemSetStringObject">
            <summary>Sets the stub of IParameterCollection.set_Item(String parameterName, Object value)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.mpui::Microsoft#Practices#Unity#InterceptionExtension#IParameterCollection#GetParameterInfo(System.Int32)">
            <summary>Sets the stub of IParameterCollection.GetParameterInfo(Int32 index)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.mpui::Microsoft#Practices#Unity#InterceptionExtension#IParameterCollection#GetParameterInfo(System.String)">
            <summary>Sets the stub of IParameterCollection.GetParameterInfo(String parameterName)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.mpui::Microsoft#Practices#Unity#InterceptionExtension#IParameterCollection#ParameterName(System.Int32)">
            <summary>Sets the stub of IParameterCollection.ParameterName(Int32 index)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.ParameterNameInt32">
            <summary>Sets the stub of IParameterCollection.ParameterName(Int32 index)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.RemoveAtInt32">
            <summary>Sets the stub of IList.RemoveAt(Int32 index)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.RemoveObject">
            <summary>Sets the stub of IList.Remove(Object value)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.SyncRootGet">
            <summary>Sets the stub of ICollection.get_SyncRoot()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Sets the stub of ICollection.CopyTo(Array array, Int32 index)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IList#Add(System.Object)">
            <summary>Sets the stub of IList.Add(Object value)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IList#Clear">
            <summary>Sets the stub of IList.Clear()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IList#Contains(System.Object)">
            <summary>Sets the stub of IList.Contains(Object value)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IList#IndexOf(System.Object)">
            <summary>Sets the stub of IList.IndexOf(Object value)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>Sets the stub of IList.Insert(Int32 index, Object value)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IList#Remove(System.Object)">
            <summary>Sets the stub of IList.Remove(Object value)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IList#RemoveAt(System.Int32)">
            <summary>Sets the stub of IList.RemoveAt(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#ICollection#Count">
            <summary>Sets the stub of ICollection.get_Count()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IList#IsFixedSize">
            <summary>Sets the stub of IList.get_IsFixedSize()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#IList#IsReadOnly">
            <summary>Sets the stub of IList.get_IsReadOnly()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#ICollection#IsSynchronized">
            <summary>Sets the stub of ICollection.get_IsSynchronized()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.System#Collections#IList#Item(System.Int32)">
            <summary>Sets the stub of IList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.Microsoft#Practices#Unity#InterceptionExtension#IParameterCollection#Item(System.String)">
            <summary>Sets the stub of IParameterCollection.get_Item(String parameterName)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubIParameterCollection.global::System#Collections#ICollection#SyncRoot">
            <summary>Sets the stub of ICollection.get_SyncRoot()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptionPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptionPolicy.#ctor">
            <summary>Initializes a new instance of type StubITypeInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptionPolicy.AttachBackingFieldToProxyType">
            <summary>Attaches delegates to emulate StubITypeInterceptionPolicy.ProxyType as a property with a backing field.</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptionPolicy.GetInterceptorIBuilderContext">
            <summary>Sets the stub of ITypeInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptionPolicy.mpui::Microsoft#Practices#Unity#InterceptionExtension#ITypeInterceptionPolicy#GetInterceptor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of ITypeInterceptionPolicy.GetInterceptor(IBuilderContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptionPolicy.ProxyTypeGet">
            <summary>Sets the stub of ITypeInterceptionPolicy.get_ProxyType()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptionPolicy.ProxyTypeSetType">
            <summary>Sets the stub of ITypeInterceptionPolicy.set_ProxyType(Type value)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptionPolicy.mpui::Microsoft#Practices#Unity#InterceptionExtension#ITypeInterceptionPolicy#ProxyType">
            <summary>Sets the stub of ITypeInterceptionPolicy.get_ProxyType()</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptor">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptor.#ctor">
            <summary>Initializes a new instance of type StubITypeInterceptor</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptor.CanInterceptType">
            <summary>Sets the stub of IInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptor.CreateProxyTypeTypeTypeArray">
            <summary>Sets the stub of ITypeInterceptor.CreateProxyType(Type t, Type[] additionalInterfaces)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptor.GetInterceptableMethodsTypeType">
            <summary>Sets the stub of IInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptor.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptor#CanIntercept(System.Type)">
            <summary>Sets the stub of IInterceptor.CanIntercept(Type t)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptor.mpui::Microsoft#Practices#Unity#InterceptionExtension#IInterceptor#GetInterceptableMethods(System.Type,System.Type)">
            <summary>Sets the stub of IInterceptor.GetInterceptableMethods(Type interceptedType, Type implementationType)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubITypeInterceptor.mpui::Microsoft#Practices#Unity#InterceptionExtension#ITypeInterceptor#CreateProxyType(System.Type,System.Type[])">
            <summary>Sets the stub of ITypeInterceptor.CreateProxyType(Type t, Type[] additionalInterfaces)</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.DoGetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>Sets the stub of InjectionPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.DoGetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the stub of InjectionPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.DoesMatch(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>Sets the stub of InjectionPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.DoesMatchMethodImplementationInfo">
            <summary>Sets the stub of InjectionPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.GetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>Sets the stub of InjectionPolicy.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.GetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the stub of InjectionPolicy.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubInjectionPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInjectionPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InstanceInterceptionStrategy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubInstanceInterceptionStrategy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of InstanceInterceptionStrategy.PostBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.PostBuildUpIBuilderContext">
            <summary>Sets the stub of InstanceInterceptionStrategy.PostBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.PostTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of BuilderStrategy.PostTearDown(IBuilderContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.PostTearDownIBuilderContext">
            <summary>Sets the stub of BuilderStrategy.PostTearDown(IBuilderContext context)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of BuilderStrategy.PreBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.PreBuildUpIBuilderContext">
            <summary>Sets the stub of BuilderStrategy.PreBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.PreTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of BuilderStrategy.PreTearDown(IBuilderContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.PreTearDownIBuilderContext">
            <summary>Sets the stub of BuilderStrategy.PreTearDown(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInstanceInterceptionStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingClassGenerator">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingClassGenerator.#ctor(System.Type,System.Type[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingClassGenerator.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptingClassGenerator</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingClassGenerator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingClassGenerator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingClassGenerator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.#ctor(System.Object,System.Type,System.Type[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.CreateObjRef(System.Type)">
            <summary>Sets the stub of RealProxy.CreateObjRef(Type requestedType)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.CreateObjRefType">
            <summary>Sets the stub of RealProxy.CreateObjRef(Type requestedType)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.GetCOMIUnknown(System.Boolean)">
            <summary>Sets the stub of RealProxy.GetCOMIUnknown(Boolean fIsMarshalled)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.GetCOMIUnknownBoolean">
            <summary>Sets the stub of RealProxy.GetCOMIUnknown(Boolean fIsMarshalled)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of RealProxy.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of RealProxy.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.GetTransparentProxy">
            <summary>Sets the stub of RealProxy.GetTransparentProxy()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.GetTransparentProxy01">
            <summary>Sets the stub of RealProxy.GetTransparentProxy()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptingRealProxy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>Sets the stub of InterceptingRealProxy.Invoke(IMessage msg)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.InvokeIMessage">
            <summary>Sets the stub of InterceptingRealProxy.Invoke(IMessage msg)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.SetCOMIUnknown(System.IntPtr)">
            <summary>Sets the stub of RealProxy.SetCOMIUnknown(IntPtr i)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.SetCOMIUnknownIntPtr">
            <summary>Sets the stub of RealProxy.SetCOMIUnknown(IntPtr i)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.SupportsInterface(System.Guid@)">
            <summary>Sets the stub of RealProxy.SupportsInterface(Guid&amp; iid)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.SupportsInterfaceGuidRef">
            <summary>Sets the stub of RealProxy.SupportsInterface(Guid&amp; iid)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptingRealProxy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.Interception</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception.Initialize">
            <summary>Sets the stub of Interception.Initialize()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception.Initialize01">
            <summary>Sets the stub of Interception.Initialize()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception.InitializeStub">
            <summary>Initializes a new instance of type StubInterception</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception.Remove">
            <summary>Sets the stub of UnityContainerExtension.Remove()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception.Remove01">
            <summary>Sets the stub of UnityContainerExtension.Remove()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterception.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.GetBehaviorsPolicy(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>Sets the stub of InterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.GetBehaviorsPolicyIPolicyListTypeString">
            <summary>Sets the stub of InterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptionBehavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.GetBehaviorsPolicy(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>Sets the stub of InterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.GetBehaviorsPolicyIPolicyListTypeString">
            <summary>Sets the stub of InterceptionBehavior.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptionBehavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehavior`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of InterceptionBehaviorBase.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.GetBehaviorsPolicy(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>Sets the stub of InterceptionBehaviorBase.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.GetBehaviorsPolicyIPolicyListTypeString">
            <summary>Sets the stub of InterceptionBehaviorBase.GetBehaviorsPolicy(IPolicyList policies, Type implementationType, String name)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptionBehaviorBase</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorPipeline">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorPipeline.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorPipeline.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorPipeline.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptionBehaviorPipeline</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorPipeline.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorPipeline.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorPipeline.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorsPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorsPolicy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorsPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptionBehaviorsPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorsPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorsPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionBehaviorsPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionMember">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterceptionMember</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionMember.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionMember.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of InjectionMember.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionMember.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of InjectionMember.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionMember.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptionMember</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionMember.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionMember.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptionMember.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.Interceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of Interceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of Interceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptor</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor`1">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor`1.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor`1.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>Sets the stub of Interceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor`1.AddPoliciesTypeTypeStringIPolicyList">
            <summary>Sets the stub of Interceptor.AddPolicies(Type serviceType, Type implementationType, String name, IPolicyList policies)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor`1.InitializeStub">
            <summary>Initializes a new instance of type StubInterceptor</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterceptor`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptor">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptor.InitializeStub">
            <summary>Initializes a new instance of type StubInterfaceInterceptor</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptorClassGenerator">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptorClassGenerator.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptorClassGenerator.InitializeStub">
            <summary>Initializes a new instance of type StubInterfaceInterceptorClassGenerator</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptorClassGenerator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptorClassGenerator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubInterfaceInterceptorClassGenerator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingInfo">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingInfo.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingInfo.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingInfo.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingInfo.InitializeStub">
            <summary>Initializes a new instance of type StubMatchingInfo</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingInfo.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingInfo.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingInfo.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingRuleSet">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.MatchingRuleSet</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingRuleSet.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingRuleSet.InitializeStub">
            <summary>Initializes a new instance of type StubMatchingRuleSet</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingRuleSet.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingRuleSet.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMatchingRuleSet.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubMemberNameMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMemberNameMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.Equals(System.Object)">
            <summary>Sets the stub of MethodImplementationInfo.Equals(Object obj)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.EqualsObject">
            <summary>Sets the stub of MethodImplementationInfo.Equals(Object obj)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.GetHashCode">
            <summary>Sets the stub of MethodImplementationInfo.GetHashCode()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.GetHashCode01">
            <summary>Sets the stub of MethodImplementationInfo.GetHashCode()</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.InitializeStub">
            <summary>Initializes a new instance of type StubMethodImplementationInfo</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.ToString">
            <summary>Sets the stub of MethodImplementationInfo.ToString()</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.ToString01">
            <summary>Sets the stub of MethodImplementationInfo.ToString()</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodImplementationInfo.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodSignatureMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodSignatureMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodSignatureMatchingRule.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodSignatureMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodSignatureMatchingRule.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodSignatureMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubMethodSignatureMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodSignatureMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodSignatureMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubMethodSignatureMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubNamespaceMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubNamespaceMatchingRule.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubNamespaceMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubNamespaceMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubNamespaceMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubNamespaceMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubNamespaceMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubNamespaceMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubNamespaceMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterCollection">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterCollection.#ctor(System.Object[],System.Reflection.ParameterInfo[],System.Predicate{System.Reflection.ParameterInfo})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterCollection.InitializeStub">
            <summary>Initializes a new instance of type StubParameterCollection</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterCollection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterCollection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterCollection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingInfo">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingInfo.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingInfo.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingInfo.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingInfo.#ctor(System.String,System.Boolean,Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingInfo.InitializeStub">
            <summary>Initializes a new instance of type StubParameterTypeMatchingInfo</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingInfo.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingInfo.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingInfo.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubParameterTypeMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubParameterTypeMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPipelineManager">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.PipelineManager</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPipelineManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPipelineManager.InitializeStub">
            <summary>Initializes a new instance of type StubPipelineManager</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPipelineManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPipelineManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPipelineManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicyInjectionBehavior">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicyInjectionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.PipelineManager)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicyInjectionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest,Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy[],Microsoft.Practices.Unity.IUnityContainer)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicyInjectionBehavior.InitializeStub">
            <summary>Initializes a new instance of type StubPolicyInjectionBehavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicyInjectionBehavior.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicyInjectionBehavior.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicyInjectionBehavior.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicySet">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.PolicySet</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicySet.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicySet.InitializeStub">
            <summary>Initializes a new instance of type StubPolicySet</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicySet.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicySet.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPolicySet.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingInfo">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingInfo.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingInfo.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingInfo.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingInfo.InitializeStub">
            <summary>Initializes a new instance of type StubPropertyMatchingInfo</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingInfo.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingInfo.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingInfo.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingRule.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingRule.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingRule.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubPropertyMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubPropertyMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedInstanceInterceptionPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedInstanceInterceptionPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedInstanceInterceptionPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubResolvedInstanceInterceptionPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedInstanceInterceptionPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedInstanceInterceptionPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedInstanceInterceptionPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedTypeInterceptionPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedTypeInterceptionPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedTypeInterceptionPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubResolvedTypeInterceptionPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedTypeInterceptionPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedTypeInterceptionPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubResolvedTypeInterceptionPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubReturnTypeMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubReturnTypeMatchingRule.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubReturnTypeMatchingRule.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubReturnTypeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubReturnTypeMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubReturnTypeMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubReturnTypeMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubReturnTypeMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubReturnTypeMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule[],System.String[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule[],System.String[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.DoGetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>Sets the stub of RuleDrivenPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.DoGetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the stub of RuleDrivenPolicy.DoGetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.DoesMatch(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>Sets the stub of RuleDrivenPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.DoesMatchMethodImplementationInfo">
            <summary>Sets the stub of RuleDrivenPolicy.DoesMatch(MethodImplementationInfo member)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.GetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>Sets the stub of InjectionPolicy.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.GetHandlersForMethodImplementationInfoIUnityContainer">
            <summary>Sets the stub of InjectionPolicy.GetHandlersFor(MethodImplementationInfo member, IUnityContainer container)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.InitializeStub">
            <summary>Initializes a new instance of type StubRuleDrivenPolicy</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubRuleDrivenPolicy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTagAttributeMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTagAttributeMatchingRule.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTagAttributeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTagAttributeMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubTagAttributeMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTagAttributeMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTagAttributeMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTagAttributeMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTransparentProxyInterceptor">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTransparentProxyInterceptor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTransparentProxyInterceptor.InitializeStub">
            <summary>Initializes a new instance of type StubTransparentProxyInterceptor</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTransparentProxyInterceptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTransparentProxyInterceptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTransparentProxyInterceptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.TypeInterceptionStrategy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubTypeInterceptionStrategy</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of TypeInterceptionStrategy.PostBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.PostBuildUpIBuilderContext">
            <summary>Sets the stub of TypeInterceptionStrategy.PostBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.PostTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of BuilderStrategy.PostTearDown(IBuilderContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.PostTearDownIBuilderContext">
            <summary>Sets the stub of BuilderStrategy.PostTearDown(IBuilderContext context)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of TypeInterceptionStrategy.PreBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.PreBuildUpIBuilderContext">
            <summary>Sets the stub of TypeInterceptionStrategy.PreBuildUp(IBuilderContext context)</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.PreTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>Sets the stub of BuilderStrategy.PreTearDown(IBuilderContext context)</summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.PreTearDownIBuilderContext">
            <summary>Sets the stub of BuilderStrategy.PreTearDown(IBuilderContext context)</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeInterceptionStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeMatchingRule">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeMatchingRule.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeMatchingRule.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeMatchingRule.InitializeStub">
            <summary>Initializes a new instance of type StubTypeMatchingRule</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeMatchingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeMatchingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubTypeMatchingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInterceptor">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInterceptor.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInterceptor.InitializeStub">
            <summary>Initializes a new instance of type StubVirtualMethodInterceptor</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInterceptor.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInterceptor.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInterceptor.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInvocation">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInvocation.#ctor(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInvocation.InitializeStub">
            <summary>Initializes a new instance of type StubVirtualMethodInvocation</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInvocation.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInvocation.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodInvocation.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodReturn">
            <summary>Stub type of Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodReturn.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodReturn.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,System.Object,System.Object[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodReturn.InitializeStub">
            <summary>Initializes a new instance of type StubVirtualMethodReturn</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodReturn.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodReturn.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Fakes.StubVirtualMethodReturn.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
